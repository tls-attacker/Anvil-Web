openapi: 3.0.1
info:
  title: Anvil Web API
  description: |-
    This document describes the Anvil Web API. It is used to communicate between AnvilWorkers, the AnvilWeb UI and the AnvilWeb backend.

    AnvilWorkers need to register at the backend to get an id. After that, they have to poll the fetch endpoint regularly to get new commands.
  version: v2
externalDocs:
  description: TLS Anvil on the Web
  url: https://tls-anvil.com
servers:
  - url: https://localhost:5001/api/v2
tags:
  - name: report
    description: Data endpoint to get reports out of the database.
  - name: uploadreport
    description: Used to upload complete finished reports to the database.
  - name: testrun
    description: Data endpoint to get testruns out of the database.
  - name: control
    description: Used to manage the AnvilWorkers
  - name: worker
    description: Used from an AnvwilWorker to communicate with the backend
paths:
  /report/reportIdentifiers:
    get:
      tags:
        - report
      summary: Get a list of all report identifiers
      description: Get a list of all report identifiers
      operationId: getReportIdentifiers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Identifier'
  /report:
    get:
      tags:
        - report
      summary: Get all reports
      description: Gets a list of all reports, containing its testruns but not testcases.
      operationId: getReports
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
  /report/{identifier}:
    get:
      tags:
        - report
      summary: Get a single report
      description: Get a single report, containing its testruns but not testcases
      operationId: getReport
      parameters: 
        - name: identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identifier'
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Report'
    delete:
      tags:
        - report
      summary: Delete a report
      description: Delete a report
      operationId: deleteReport
      parameters: 
        - name: identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identifier'
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /report/{identifier}/testRuns/{className}/{methodName}:
    get:
      tags:
        - report
        - testrun
      summary: Get a specific testrun
      description: Get a specific testrun from a report of the given identifier, containing its testcases.
      operationId: getTestrunForReport
      parameters: 
        - name: identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identifier'
        - name: className
          in: path
          required: true
          schema:
            type: string
        - name: methodName
          in: path
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/TestRun'
  /testRun/{className}/{methodName}:
    get:
      tags:
        - testrun
      summary: Get multiple testruns
      description: Get multiple testruns for the same method, but from different reports
      operationId: getTestruns
      parameters: 
        - name: className
          in: path
          required: true
          schema:
            type: string
        - name: methodName
          in: path
          required: true
          schema:
            type: string
        - name: identifiers[]
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Identifier'
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                propertyNames: 
                  $ref: '#/components/schemas/Identifier'
                additionalProperties: 
                  $ref: '#/components/schemas/TestRun'
  /worker/register:
    post:
      tags:
        - worker
      summary: Register a new worker
      description: Register as a new worker for this backend
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties: 
                name:
                  type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                $ref: '#/components/schemas/AnvilWorker'
  /worker/fetch:
    post:
      tags:
        - worker
      summary: Fetch next command
      description: Fetch next command for a worker (polling)
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties: 
                id:
                  type: string
                  description: worker id
                status:
                  type: string
                  description: staus of the worker
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                $ref: '#/components/schemas/AnvilCommand'
  /worker/update/scan:
    post:
      tags:
        - worker
      summary: Signal, that the worker started scanning
      description: Signal, that the worker is now doing a feature extraction scan
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                jobId:
                  type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                properties: 
                  status:
                    type: string
                    default: "OK"
  /worker/update/report:
    post:
      tags:
        - worker
      summary: Update a test report
      description: Create or update a test report for the given identifier
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                jobId:
                  type: string
                report:
                  $ref: '#/components/schemas/Report'
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                properties: 
                  status:
                    type: string
                    default: "OK"
  /worker/update/testrun:
    post:
      tags:
        - worker
      summary: Update a testrun
      description: Create or update a testrun for the given job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                jobId:
                  type: string
                report:
                  $ref: '#/components/schemas/TestRun'
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                properties: 
                  status:
                    type: string
                    default: "OK"
  /worker/update/testcase:
    post:
      tags:
        - worker
      summary: Append test case
      description: Append a test case to an existing testrun
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                jobId:
                  type: string
                className:
                  type: string
                methodName:
                  type: string
                testcase:
                  $ref: '#/components/schemas/TestCase'
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                properties: 
                  status:
                    type: string
                    default: "OK"
  /control/worker:
    get:
      tags:
        - control
      summary: Get a list of active workers
      description: Get a list of all active workers
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: object
                $ref: '#/components/schemas/AnvilWorker'
  /control/worker/{id}:
    get:
      tags:
        - control
      summary: Get a single worker
      description: Get a single worker by its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnvilWorker'
  /control/worker/{id}/shutdown:
    post:
      tags:
        - control
      summary: Shutdown a worker
      description: Send a shutdown command to a worker
      parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /control/job:
    get:
      tags:
        - control
      summary: Get all active or queued jobs
      description: Get a list of all active or queued up jobs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnvilJob'
    post:
      tags:
        - control
      summary: Add a new job
      description: Add a new job to the queue
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                config:
                workerId:
                  type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/AnvilJob'
  /control/job/{id}:
    get:
      tags:
        - control
      summary: Get a single job
      description: Get a single job by id
      parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/AnvilJob'
  /control/job/{id}/cancel:
    post:
      tags:
        - control
      summary: Cancel a job
      description: Cancel a job, deleting it and stopping the corresponding worker action
      parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SuccessResponse'
  /uploadReport:
    post:
      tags:
        - uploadreport
      summary: Upload a finished report
      description: Upload a finished report as zip folder
      requestBody: 
        content:
          multipart/form-data: 
            schema:
              type: object
              properties:
                report:
                  type: string
                  format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SuccessResponse'
components:
  schemas:
    AnvilCommand:
      type: object
      properties: 
        command:
          type: string
          enum:
            - "QUEUE_RUN"
            - "STOP_RUN"
            - "RESTART_RUN"
            - "RESTART_TEST"
            - "RESTART_STATE"
            - "SHUTDOWN"
            - "OK"
        job:
          $ref: '#/components/schemas/AnvilJob'
        jobId:
          type: string
        className:
          type: string
        methodName:
          type: string
        uuid:
          type: string
    AnvilJob:
      type: object
      properties: 
        id: 
          type: string
        status:
          type: string
          enum:
            - "QUEUED"
            - "SCANNING"
            - "TESTING"
            - "CANCELED"
        progress:
          type: integer
        identifier:
          $ref: '#/components/schemas/Identifier'
        config:
        workerId:
          type: string
        workerName:
          type: string
    AnvilWorker:
      type: object
      properties: 
        name:
          type: string
        id:
          type: string
        status:
          type: string
          enum:
            - "WORKING"
            - "IDLE"
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnvilJob'
    SuccessResponse:
      type: object
      properties: 
        success:
          type: boolean
    Identifier:
      type: string
      examples: ["openssl-server", "matrixssl-client"]
    Report:
      type: object
      properties:
        Identifier:
          $ref: '#/components/schemas/Identifier'
        Date:
          type: string
          format: date-time
          examples: ["2022-05-22T16:07:30.361Z"]
        DisplayName:
          type: string
          examples: ["openssl-server"]
        Running:
          type: boolean
        ElapsedTime:
          type: integer
          examples: [12345]
        FailedTests:
          type: integer
          examples: [10]
        SucceededTests:
          type: integer
          examples: [10]
        DisabledTests:
          type: integer
          examples: [10]
        TotalTests:
          type: integer
          examples: [10]
        FinishedTests:
          type: integer
          examples: [10]
        StatesCount:
          type: integer
          examples: [10]
        Score:
          $ref: '#/components/schemas/ScoreMap'
        TestEndpointType:
          type: string
          enum: 
            - "server"
            - "client"
        Config:
          type: string
    ScoreCategory:
      type: string
      enum: 
        - "ALERT"
        - "CVE"
        - "CERTIFICATE"
        - "CRYPTO"
        - "DEPRECATED"
        - "HANDSHAKE"
        - "MESSAGESTRUCTURE"
        - "RECORDLAYER"
        - "SECURITY"
        - "INTEROPERABILITY"
        - "COMPLIANCE"
    ScoreMap:
      type: object
      propertyNames: 
        $ref: '#/components/schemas/ScoreCategory'
      additionalProperties: 
        $ref: '#/components/schemas/Score'
    Score:
      type: object
      properties: 
        Total:
          type: number
        Reached:
          type: number
        Percentage:
          type: number
        SeverityLevel:
          $ref: '#/components/schemas/SeverityLevel'
    SeverityLevel:
      type: string
      enum:
        - "INFORMATIONAL"
        - "LOW"
        - "MEDIUM"
        - "HIGH"
        - "CRITICAL"
    TestMethod:
      type: object
      properties: 
        Description:
          type: string
        TestDescription:
          type: string
        TlsVersion:
          type: string
          examples: ["TLS 1.3"]
        RFC:
          type: object
          properties:
            Section:
              type: string
            number:
              type: integer
        MethodName:
          type: string
        DisplayName:
          type: string
        ClassName:
          type: string
    TestResult:
      type: string
      enum:
        - "STRICTLY_SUCCEEDED"
        - "FULLY_FAILED"
        - "PARTIALLY_FAILED"
        - "CONCEPTUALLY_SUCCEEDED"
        - "DISABLED"
        - "PARSER_ERROR"
        - "NOT_SPECIFIED"
        - "INCOMPLETE"
    TestRun:
      type: object
      properties: 
        TestMethod:
          $ref: '#/components/schemas/TestMethod'
        Result:
          $ref: '#/components/schemas/TestResult'
        HasStateWithAdditionalResultInformation:
          type: boolean
        HasVaryingAdditionalResultInformation:
          type: boolean
        DisabledReason:
          type: string
        FailedReason:
          type: string
        FailedStacktrace:
          type: string
        ElapsedTime:
          type: integer
        TestCases:
          type: array
          items: 
            $ref: '#/components/schemas/TestCase'
        CaseCount:
          type: integer
        SucceededCases:
          type: integer
        ConSucceededCases:
          type: integer
        FailedCases:
          type: integer
        Score:
          $ref: '#/components/schemas/ScoreMap'
        FailureInducingCombinations:
          type: object
          additionalProperties: 
            type: string
    TestCase:
      type: object
      properties: 
        DerivationContainer:
          type: object
          additionalProperties: 
            type: string
        DisplayName:
          type: string
        Result:
          $ref: '#/components/schemas/TestResult'
        AdditionalResultInformation:
          type: string
        AdditionalTestInformation:
          type: string
        SrcPort:
          type: integer
        DstPort:
          type: integer
        StartTimestamp:
          type: string
          format: date-time
        EndTimestamp:
          type: string
          format: date-time
        uuid:
          type: string
        Stacktrace:
          type: string
        