{
  "XLF-7iivb12njd": {
    "description": "Send a Certificate Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Certificate",
      "certificateMessageLengthTLS12"
    ]
  },
  "XLF-eqZYAdwNye": {
    "description": "Send a Certificate Message with a modified certificate list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Certificate",
      "certificateListLengthTLS12"
    ]
  },
  "XLF-uQXeugeUkb": {
    "description": "Send a Certificate Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Certificate",
      "certificateMessageLengthTLS13"
    ]
  },
  "XLF-ia3wstdqYe": {
    "description": "Send a Certificate Message with a modified certificate list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Certificate",
      "certificateListLengthTLS13"
    ]
  },
  "XLF-ujMXSAMmVF": {
    "description": "Send a Certificate Message with a modified request context length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Certificate",
      "certificateRequestContextLength"
    ]
  },
  "XLF-tSjRqK81S8": {
    "description": "Send a Certificate Verify Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "CertificateVerify",
      "certificateVerifyLength"
    ]
  },
  "XLF-PkwVF7pRQa": {
    "description": "Send a Certificate Verify Message with a modified signature length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "CertificateVerify",
      "certificateVerifySignatureLength"
    ]
  },
  "XLF-4iPUuT51YH": {
    "description": "Send a Client Key Exchange Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ClientKeyExchange",
      "clientKeyExchangeLength"
    ]
  },
  "XLF-NFYNXBgXk8": {
    "description": "Send a Client Key Exchange Message with a modified public key length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ClientKeyExchange",
      "clientKeyExchangePublicKeyLength"
    ]
  },
  "XLF-SA1CoksBgE": {
    "description": "Send an Encrypted Extensions Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "EncryptedExtensions",
      "encryptedExtensionsLength"
    ]
  },
  "XLF-Ax6kVTgheY": {
    "description": "Send an Encrypted Extensions Message with a modified Extensions list length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "EncryptedExtensions",
      "encryptedExtensionsExtensionsLength"
    ]
  },
  "XLF-CSQn3dUG9L": {
    "description": "Send a Finished Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Finished",
      "finishedLengthTLS12"
    ]
  },
  "XLF-CALCiXbvRo": {
    "description": "Send a Finished Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Finished",
      "finishedLengthTLS13"
    ]
  },
  "XLF-anjpbghN69": {
    "description": "Send a Hello Message with a modified Session ID length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "helloSessionIdLengthTLS12"
    ]
  },
  "XLF-c4Db7ctU7V": {
    "description": "Send a Hello Message with a modified Session ID length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "helloSessionIdLengthTLS13"
    ]
  },
  "XLF-7AdFFavtAd": {
    "description": "Send a Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "helloLengthTLS12"
    ]
  },
  "XLF-RUoZsBa3n4": {
    "description": "Send a Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "helloLengthTLS13"
    ]
  },
  "XLF-8NkdoEnnup": {
    "description": "Send a Hello Message with a modified Extension list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "helloExtensionsLengthTLS12"
    ]
  },
  "XLF-hjh8QDJmvK": {
    "description": "Send a Hello Message with a modified Extension list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "helloExtensionsLengthTLS13"
    ]
  },
  "XLF-9XEqy2ZCoa": {
    "description": "Send a Client Hello Message with a modified Cipher Suite list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "clientHelloCipherSuitesLengthTLS12"
    ]
  },
  "XLF-rUWM4KWG2t": {
    "description": "Send a Client Hello Message with a modified Cipher Suite list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "clientHelloCipherSuitesLengthTLS13"
    ]
  },
  "XLF-2BCMFwzm2j": {
    "description": "Send a Client Hello Message with a modified compression list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "clientHelloCompressionLengthTLS12"
    ]
  },
  "XLF-pR3iFN7Miv": {
    "description": "Send a Client Hello Message with a modified compression list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "Hello",
      "clientHelloCompressionLengthTLS13"
    ]
  },
  "XLF-Z5CqDTjvni": {
    "description": "Send a Server Key Exchange Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ServerKeyExchange",
      "serverKeyExchangeLength"
    ]
  },
  "XLF-gvZTTfnQTn": {
    "description": "Send a Server Key Exchange Message with a modified signature length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ServerKeyExchange",
      "serverKeyExchangeSignatureLength"
    ]
  },
  "XLF-yiZVhouStn": {
    "description": "Send a Server Key Exchange Message with a modified public key length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ServerKeyExchange",
      "serverKeyExchangePublicKeyLength"
    ]
  },
  "XLF-8852p34nEP": {
    "description": "Send a Diffie-Hellman Server Key Exchange Message with a modified modulus length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ServerKeyExchange",
      "modulusLength"
    ]
  },
  "XLF-DVpNzSiTq5": {
    "description": "Send a Diffie-Hellman Server Key Exchange Message with a modified generator length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "ServerKeyExchange",
      "generatorLength"
    ]
  },
  "XLF-MNJikTAwVv": {
    "description": "Send an ALPN Extension in the Hello Message with a modified length value",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ALPNExtension",
      "alpnExtensionLengthTLS12"
    ]
  },
  "XLF-3D5DbZQNVB": {
    "description": "Send an ALPN Extension in the Hello Message with a modified protocols list length value",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ALPNExtension",
      "alpnProposedAlpnProtocolsLengthTLS12"
    ]
  },
  "XLF-yU3WPbhb9z": {
    "description": "Send an ALPN Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ALPNExtension",
      "alpnExtensionLengthTLS13"
    ]
  },
  "XLF-47Go2svX7H": {
    "description": "Send an ALPN Extension in the Hello Message with a modified protocols list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ALPNExtension",
      "alpnProposedAlpnProtocolsLengthTLS13"
    ]
  },
  "XLF-mgWov7XYiw": {
    "description": "Send an EC Point Format Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ECPointFormatExtension",
      "pointFormatExtensionLength"
    ]
  },
  "XLF-XdYDypM7gN": {
    "description": "Send an EC Point Format Extension in the Hello Message with a modified formats list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ECPointFormatExtension",
      "pointFormatExtensionFormatsLength"
    ]
  },
  "XLF-p6RPJ7GabA": {
    "description": "Send an Encrypt-Then-Mac Extension in the Hello Message with a modified length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "EncryptThenMacExtension",
      "encryptThenMacExtensionLengthTLS12"
    ]
  },
  "XLF-1y1FTzJRE5": {
    "description": "Send an Encrypt-Then-Mac Extension in the Hello Message with a modified length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "EncryptThenMacExtension",
      "encryptThenMacExtensionLengthTLS13"
    ]
  },
  "XLF-FjfCZ7g3ZD": {
    "description": "Send an Extended Master Secret Extension in the Hello Message with a modified length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ExtendedMasterSecretExtension",
      "extendedMasterSecretExtensionLengthTLS12"
    ]
  },
  "XLF-THGYQGHHdD": {
    "description": "Send an Extended Master Secret Extension in the Hello Message with a modified length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "ExtendedMasterSecretExtension",
      "extendedMasterSecretExtensionLengthTLS13"
    ]
  },
  "XLF-eouPKJt7Ht": {
    "description": "Send a Heartbeat Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "HeartbeatExtension",
      "heartbeatExtensionLengthTLS12"
    ]
  },
  "XLF-dQABdv21Am": {
    "description": "Send a Heartbeat Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "HeartbeatExtension",
      "heartbeatExtensionLengthTLS13"
    ]
  },
  "XLF-YEP4C4ruSR": {
    "description": "Send a Key Share Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "KeyShareExtension",
      "keyShareExtensionLength"
    ]
  },
  "XLF-kVXshRHqZy": {
    "description": "Send a Key Share Extension in the Hello Message with a modified entry list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "KeyShareExtension",
      "keyShareEntryListLength"
    ]
  },
  "XLF-thAfdtNTPh": {
    "description": "Send a Padding Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PaddingExtension",
      "paddingExtensionLengthTLS12"
    ]
  },
  "XLF-a56v24NnM5": {
    "description": "Send a Padding Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PaddingExtension",
      "paddingExtensionLengthTLS13"
    ]
  },
  "XLF-XHw8giy6m4": {
    "description": "Send a Pre Shared Key Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PreSharedKeyExtension",
      "preSharedKeyExtensionLength"
    ]
  },
  "XLF-kwNxe25ef8": {
    "description": "Send a Pre Shared Key Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PreSharedKeyExtension",
      "preSharedKeyExtensionIdentityListLength"
    ]
  },
  "XLF-4L65zmLyuG": {
    "description": "Send a Pre Shared Key Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PreSharedKeyExtension",
      "preSharedKeyExtensionBinderListLength"
    ]
  },
  "XLF-NaN98M5Hqd": {
    "description": "Send a Pre Shared Key Exchange Modes Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PSKKeyExchangeModesExtension",
      "pskKeyExchangeModesExtensionLength"
    ]
  },
  "XLF-Nq22Dyhfzt": {
    "description": "Send a Pre Shared Key Exchange Modes Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "PSKKeyExchangeModesExtension",
      "pskKeyExchangeModesExtensionListLength"
    ]
  },
  "XLF-oU4NN7JA83": {
    "description": "Send a Renegotiation Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "RenegotiationExtension",
      "renegotiationExtensionLengthTLS12"
    ]
  },
  "XLF-iqfnLSxRsR": {
    "description": "Send a Renegotiation Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "RenegotiationExtension",
      "renegotiationExtensionLengthTLS13"
    ]
  },
  "XLF-AxKvemiN6n": {
    "description": "Send a Renegotiation Extension in the Hello Message with a modified Extension Info length value (+1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "RenegotiationExtension",
      "renegotiationExtensionInfoLengthTLS12"
    ]
  },
  "XLF-Dtq2iEmPmd": {
    "description": "Send a Signature And Hash Algorithms Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "SignatureAndHashAlgorithmsExtension",
      "signatureAndHashAlgorithmsExtensionLengthTLS12"
    ]
  },
  "XLF-s6s3mWStow": {
    "description": "Send a Signature And Hash Algorithms Extension in the Hello Message with a modified length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "SignatureAndHashAlgorithmsExtension",
      "signatureAndHashAlgorithmsExtensionLengthTLS13"
    ]
  },
  "XLF-x666dC8D1Z": {
    "description": "Send a Signature And Hash Algorithms Extension in the Hello Message with a modified algorithm list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "SignatureAndHashAlgorithmsExtension",
      "signatureAndHashAlgorithmsListLengthTLS12"
    ]
  },
  "XLF-Qm9jhF6Pn8": {
    "description": "Send a Signature And Hash Algorithms Extension in the Hello Message with a modified algorithm list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "SignatureAndHashAlgorithmsExtension",
      "signatureAndHashAlgorithmsListLengthTLS13"
    ]
  },
  "XLF-9xtqzkYrTD": {
    "description": "Send a Supported Versions Extension in the Hello Message with a modified algorithm list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "SupportedVersionsExtension",
      "supportedVersionsExtensionLength"
    ]
  },
  "XLF-ATViZnuPw9": {
    "description": "Send a Supported Versions Extension in the Hello Message with a modified algorithm list length value (-1)",
    "severityLevels": {
      "MessageStructure": 60,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "lengthfield",
      "extensions",
      "SupportedVersionsExtension",
      "supportedVersionsListLength"
    ]
  },
  "5246-eFjEfmd5DJ": {
    "description": "TLS_NULL_WITH_NULL_NULL is specified and is the initial state of a TLS connection during the first handshake on that channel, but MUST NOT be negotiated, as it provides no more protection than an unsecured connection.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "A.5. The Cipher Suite"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "A5CipherSuite",
      "negotiateTLS_NULL_WITH_NULL_NULL"
    ]
  },
  "5246-Tc1PNh8yZh": {
    "description": "These cipher suites MUST NOT be used by TLS 1.2 implementations unless the application layer has specifically requested to allow anonymous key exchange.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "A.5. The Cipher Suite"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "A5CipherSuite",
      "anonCipherSuites"
    ]
  },
  "5246-7JhgKXeTXv": {
    "description": "If the decryption fails, a fatal bad_record_mac alert MUST be generated.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.3.3 AEAD Ciphers"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "AEADCiphers",
      "invalidAuthTag"
    ]
  },
  "5246-sYXZ8a3B4C": {
    "description": "If the decryption fails, a fatal bad_record_mac alert MUST be generated.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.3.3 AEAD Ciphers"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "AEADCiphers",
      "invalidCiphertext"
    ]
  },
  "5246-RNB9LX21i9": {
    "description": "Each uint8 in the padding data vector MUST be filled with the padding length value. The receiver MUST check this padding and MUST use the bad_record_mac alert to indicate padding errors.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 80,
      "RecordLayer": 100,
      "Interoperability": 80,
      "Alert": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.3.2 CBC Block Cipher"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "CBCBlockCipher",
      "invalidCBCPadding"
    ]
  },
  "5246-VC1baM1Mn1": {
    "description": "bad_record_mac[...]This alert also MUST be returned if an alert is sent because a TLSCiphertext decrypted in an invalid way: either it wasn\u00e2\u20ac\u2122t an even multiple of the block length, or its padding values, when checked, weren\u00e2\u20ac\u2122t correct.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 80,
      "RecordLayer": 100,
      "Interoperability": 80,
      "Alert": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.3.2 CBC Block Cipher"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "CBCBlockCipher",
      "invalidCipherText"
    ]
  },
  "5246-JBqS2uGywY": {
    "description": "bad_record_mac[...]This alert is returned if a record is received with an incorrect MAC.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 80,
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.3.2 CBC Block Cipher"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "CBCBlockCipher",
      "invalidMAC"
    ]
  },
  "5246-BWb6uwVEte": {
    "description": "A sequence number is incremented after each record: specifically, the first record transmitted under a particular connection state MUST use sequence number 0.",
    "severityLevels": {
      "Crypto": 60,
      "RecordLayer": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.3.2 CBC Block Cipher"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "CBCBlockCipher",
      "checkReceivedMac"
    ]
  },
  "5246-DFJ73jUtxK": {
    "description": "The message consists of a single byte of value 1.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.1 Change Cipher Spec Protocol"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "ChangeCipherSpecProtocol",
      "ccsContentTest"
    ]
  },
  "5246-jxPrq1MPSR": {
    "description": "Removed IDEA and DES cipher suites. They are now deprecated and will be documented in a separate document.",
    "severityLevels": {
      "DeprecatedFeature": 60,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 5246,
      "section": "1.2 Major Differences from TLS 1.1"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "CipherSuites",
      "supportOfDeprecatedCipherSuites"
    ]
  },
  "5246-mEQLrje2mh": {
    "description": "Recipients of Finished messages MUST verify that the contents are correct.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 100,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.9 Finished"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Finished",
      "verifyFinishedMessageCorrect"
    ]
  },
  "5246-bXbN8uEo2c": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake, Alert, or ChangeCipherSpec content types. Zero-length fragments of Application data MAY be sent as they are potentially useful as a traffic analysis countermeasure.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendZeroLengthRecord_CCS"
    ]
  },
  "5246-swjhCGVQMb": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake, Alert, or ChangeCipherSpec content types. Zero-length fragments of Application data MAY be sent as they are potentially useful as a traffic analysis countermeasure.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendZeroLengthApplicationRecord"
    ]
  },
  "5246-q5y1zcoCCW": {
    "description": "Send a record without any content with Content Type Application Data.  The former record increases the sequencenumber, which should not be allowed",
    "severityLevels": {
      "Security": 100,
      "RecordLayer": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendEmptyApplicationRecord"
    ]
  },
  "5246-5JmcCtfFY3": {
    "description": "Send a record without any content with Content Type Handshake followed by an encrypted record.  The former record increases the sequencenumber, which should not be allowed",
    "severityLevels": {
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendEmptyFinishedRecord"
    ]
  },
  "5246-oqJiBwUXN8": {
    "description": "The length (in bytes) of the following TLSPlaintext.fragment. The length MUST NOT exceed 2^14.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendRecordWithPlaintextOver2pow14"
    ]
  },
  "5246-6w2UjD5RGT": {
    "description": "The length (in bytes) of the following TLSCiphertext.fragment. The length MUST NOT exceed 2^14 + 2048",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendRecordWithCiphertextOver2pow14plus2048"
    ]
  },
  "5246-M5X6WTePcK": {
    "description": "Client message boundaries are not preserved in the record layer [...] a single message MAY be fragmented across several records",
    "severityLevels": {
      "Handshake": 80,
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "recordFragmentationSupported"
    ]
  },
  "5246-jsdAL1vDy5": {
    "description": "A benign handshake executed with all parameter combinations  that affect a regular handshake",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.3.  Handshake Protocol Overview"
    },
    "tags": [
      "both",
      "tls12",
      "rfc5246",
      "HappyFlow",
      "happyFlow"
    ]
  },
  "6066-XH6ZKSteMh": {
    "description": "Note that the output of the record layer may be larger.  For example, if the negotiated length is 2^9=512, then, when using currently defined cipher suites (those defined in [RFC5246] and [RFC2712]) and null compression, the record-layer output can be at most 805 bytes: 5 bytes of headers, 512 bytes of application data, 256 bytes of padding, and 32 bytes of MAC.  This means that in this event a TLS record-layer peer receiving a TLS record-layer message larger than 805 bytes MUST discard the message and send a \"record_overflow\" alert, without decrypting the message.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 6066,
      "section": "4.  Maximum Fragment Length Negotiation"
    },
    "tags": [
      "both",
      "tls12",
      "rfc6066",
      "MaxFragmentLengthExtension",
      "enforcesRecordLimit"
    ]
  },
  "XSM-azpktANa8c": {
    "description": "It is a fatal error if a Finished message is not preceded by a ChangeCipherSpec message at the appropriate point in the handshake.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.9 Finished"
    },
    "tags": [
      "both",
      "tls12",
      "statemachine",
      "ClientServerStateMachine",
      "omitCCS"
    ]
  },
  "8446-VkKqN54gN1": {
    "description": "All the alerts listed in Section 6.2 MUST be sent with AlertLevel=fatal and MUST be treated as error alerts when received regardless of the AlertLevel in the message.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "treatsFatalAlertsAsFatalHandshake"
    ]
  },
  "8446-k8Fht68Dq2": {
    "description": "All the alerts listed in Section 6.2 MUST be sent with AlertLevel=fatal and MUST be treated as error alerts when received regardless of the AlertLevel in the message.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "treatsFatalAlertsAsFatalPostHandshake"
    ]
  },
  "8446-4vT4QZyhRd": {
    "description": "Unknown Alert types MUST be treated as error alerts.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "treatsUnknownWarningAlertsAsFatalHandshake"
    ]
  },
  "8446-Q8Xknkk2vi": {
    "description": "Unknown Alert types MUST be treated as error alerts.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "treatsUnknownWarningAlertsAsFatalPostHandshake"
    ]
  },
  "8446-zUe5jnQtoN": {
    "description": "Unknown Alert types MUST be treated as error alerts.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "treatsUnknownFatalAlertsAsFatalHandshake"
    ]
  },
  "8446-PDB3U8CTKu": {
    "description": "Unknown Alert types MUST be treated as error alerts.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "treatsUnknownFatalAlertsAsFatalPostHandshake"
    ]
  },
  "8446-V9hFSg6hoE": {
    "description": "Each party MUST send a \"close_notify\" alert before closing its write side of the connection, unless it has already sent some error alert.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "6. Alert Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "AlertProtocol",
      "sendsCloseNotify"
    ]
  },
  "8446-nvo5NZdCUK": {
    "description": "A TLS-compliant application MUST implement the TLS_AES_128_GCM_SHA256 [GCM] cipher suite",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "9.  Compliance Requirements"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "ComplianceRequirements",
      "supportsAes128GcmSha256"
    ]
  },
  "8446-xhexdB876E": {
    "description": "TLS-compliant application MUST support key exchange with secp256r1 (NIST P-256)",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "9.  Compliance Requirements"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "ComplianceRequirements",
      "supportsSecp256r1"
    ]
  },
  "8446-dZhHUctEjQ": {
    "description": "Recipients of Finished messages MUST verify that the contents are correct and if incorrect MUST terminate the connection with a \"decrypt_error\" alert.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 100,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.4. Finished"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "Finished",
      "verifyFinishedMessageCorrect"
    ]
  },
  "8446-jVohiUKi4u": {
    "description": "A benign handshake executed with all parameter combinations  that affect a regular handshake",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "2.  Protocol Overview"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "HappyFlow",
      "happyFlow"
    ]
  },
  "8446-KAEXNq6tsi": {
    "description": "Implementations that receive a KeyUpdate message prior to receiving a Finished message MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.6.3.  Key and Initialization Vector Update"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "KeyUpdate",
      "sendKeyUpdateBeforeFinished"
    ]
  },
  "8446-Dy4H1oQ8bc": {
    "description": "request_update:  Indicates whether the recipient of the KeyUpdate should respond with its own KeyUpdate.  If an implementation receives any other value, it MUST terminate the connection with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.6.3.  Key and Initialization Vector Update"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "KeyUpdate",
      "sendUnknownRequestMode"
    ]
  },
  "8446-J6tVdjJCzF": {
    "description": "If the request_update field is set to \"update_requested\", then the receiver MUST send a KeyUpdate of its own with request_update set to \"update_not_requested\" prior to sending its next Application Data record. [...]Both sender and receiver MUST encrypt their KeyUpdate messages with the old keys.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.6.3.  Key and Initialization Vector Update"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "KeyUpdate",
      "respondsWithValidKeyUpdate"
    ]
  },
  "8446-fFh7mHrXow": {
    "description": "Upon receiving a KeyUpdate, the receiver MUST update its receiving keys.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.6.3.  Key and Initialization Vector Update"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "KeyUpdate",
      "appDataUnderNewKeysSucceeds"
    ]
  },
  "8446-vbFRZNusey": {
    "description": "Implementations MUST NOT send record types not defined in this document unless negotiated by some extension. If a TLS implementation receives an unexpected record type, it MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "invalidRecordContentType"
    ]
  },
  "8446-PN89HSERKp": {
    "description": "Implementations MUST NOT send record types not defined in this document unless negotiated by some extension. If a TLS implementation receives an unexpected record type, it MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "invalidRecordContentTypeAfterEncryption"
    ]
  },
  "8446-GXAiyehrdF": {
    "description": "If the decryption fails, the receiver MUST terminate the connection with a \"bad_record_mac\" alert.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "invalidAuthTag"
    ]
  },
  "8446-n1veCSRVjQ": {
    "description": "The length (in bytes) of the following TLSPlaintext.fragment.  The length MUST NOT exceed 2^14 bytes.  An endpoint that receives a record that exceeds this length MUST terminate the connection with a \"record_overflow\" alert. [...]the full encoded TLSInnerPlaintext MUST NOT exceed 2^14 + 1 octets.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "sendRecordWithPlaintextOver2pow14"
    ]
  },
  "8446-GNEMTQXXpq": {
    "description": "If the decryption fails, the receiver MUST terminate the connection with a \"bad_record_mac\" alert.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "invalidCiphertext"
    ]
  },
  "8446-i9pq4Yt8pz": {
    "description": "All encrypted TLS records can be padded to inflate the size of the TLSCiphertext.",
    "severityLevels": {
      "RecordLayer": 100,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "acceptsOptionalPadding"
    ]
  },
  "8446-BkyuGXzztX": {
    "description": "The length MUST NOT exceed 2^14 + 256 bytes. An endpoint that receives a record that exceeds this length MUST terminate the connection with a \"record_overflow\" alert. [...]An endpoint that receives a record from its peer with TLSCiphertext.length larger than 2^14 + 256 octets MUST terminate the connection with a \"record_overflow\" alert.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "sendRecordWithCiphertextOver2pow14plus256"
    ]
  },
  "8446-aUT8tc8oYz": {
    "description": "Send a record without any content to increase the sequencenumber.",
    "severityLevels": {
      "Security": 100,
      "RecordLayer": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "sendEmptyRecord"
    ]
  },
  "8446-BSsVDoM82Z": {
    "description": "Zero-length fragments of Application Data MAY be sent, as they are potentially useful as a traffic analysis countermeasure.",
    "severityLevels": {
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "sendZeroLengthApplicationRecord"
    ]
  },
  "8446-EmE5eWBxE7": {
    "description": "Implementations MUST limit their scanning to the cleartext returned from the AEAD decryption.  If a receiving implementation does not find a non-zero octet in the cleartext, it MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "RecordLayer": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "sendEncryptedHandshakeRecordWithNoNonZeroOctet"
    ]
  },
  "8446-hKUhsUFCnx": {
    "description": "Implementations MUST limit their scanning to the cleartext returned from the AEAD decryption.  If a receiving implementation does not find a non-zero octet in the cleartext, it MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "RecordLayer": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "sendEncryptedAppRecordWithNoNonZeroOctet"
    ]
  },
  "8446-V3SF3rXAAW": {
    "description": "Implementations MUST NOT send any records with a version less than 0x0300.",
    "severityLevels": {
      "RecordLayer": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "both",
      "tls13",
      "rfc8446",
      "RecordProtocol",
      "checkMinimumRecordProtocolVersions"
    ]
  },
  "XSM-tGmYudnsgE": {
    "description": "Send a record without any content",
    "severityLevels": {
      "Security": 100,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "both",
      "tls13",
      "statemachine",
      "ClientServerStateMachine",
      "sendEmptyRecordFinished"
    ]
  },
  "5246-GFtKDMr9x7": {
    "description": "The cipher suite list, passed from the client to the server in the ClientHello message, contains the combinations of cryptographic algorithms supported by the client in order of the client's preference (favorite choice first).",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2.  Client Hello"
    },
    "tags": [
      "client",
      "tls12",
      "SupportedCiphersuites",
      "supportsMoreCiphersuitesThanAdvertised"
    ]
  },
  "5246-DZsWLPbTuc": {
    "description": "The cipher suite list, passed from the client to the server in the ClientHello message, contains the combinations of cryptographic algorithms supported by the client in order of the client's preference (favorite choice first).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2.  Client Hello"
    },
    "tags": [
      "client",
      "tls12",
      "SupportedCiphersuites",
      "supportsLessCiphersuitesThanAdvertised"
    ]
  },
  "5246-DjYR2JiJKn": {
    "description": "Unless some other fatal alert has been transmitted, each party is required to send a close_notify alert before closing the write side of the connection. The other party MUST respond with a close_notify alert of its own and close down the connection immediately, discarding any pending writes.",
    "severityLevels": {
      "Interoperability": 40,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.2.1 Closure Alerts"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "AlertProtocol",
      "closeNotify"
    ]
  },
  "5246-N8VwCXYaTF": {
    "description": "Upon transmission or receipt of a fatal alert message, both parties immediately close the connection.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.2.1 Closure Alerts"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "AlertProtocol",
      "abortAfterFatalAlertServerHello"
    ]
  },
  "5246-rcBco3YXw8": {
    "description": "Upon transmission or receipt of a fatal alert message, both parties immediately close the connection.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.2.1 Closure Alerts"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "AlertProtocol",
      "abortAfterFatalAlertServerHelloDone"
    ]
  },
  "5246-JwYcazUHHv": {
    "description": "If the server has sent a CertificateRequest message, the client MUST send the Certificate message. [...]If no suitable certificate is available, the client MUST send a certificate message containing no certificates.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.6. Client Certificate"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ClientCertificateMessage",
      "clientMustSendCertMsg"
    ]
  },
  "5246-kUgwh5Nkzn": {
    "description": "This vector MUST contain, and all implementations MUST support, CompressionMethod.null. Thus, a client and server will always be able to agree on a compression method.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2. Client Hello"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ClientHello",
      "supportsNullCompressionMethod"
    ]
  },
  "5246-iAJbTqtHyt": {
    "description": "The CRIME attack [...] (CVE-2012-4929) allows an active attacker to decrypt ciphertext (specifically, cookies) when TLS is used with TLS- level compression.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 7457,
      "section": "2.6.  Compression Attacks: CRIME, TIME, and BREACH"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ClientHello",
      "offersNonNullCompressionMethod"
    ]
  },
  "5246-D6cXH2VnPy": {
    "description": "The client uses the \"signature_algorithms\" extension to indicate to the server which signature/hash algorithm pairs may be used in digital signatures.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4.1.  Signature Algorithms"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ClientHello",
      "offeredSignatureAlgorithmsForAllCipherSuites"
    ]
  },
  "5246-booCra12We": {
    "description": "There MUST NOT be more than one extension of the same type. [...]The \"anonymous\" value is meaningless in this context but used in Section 7.4.3.  It MUST NOT appear in this extension.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4. Hello Extensions and 7.4.1.4.1. Signature Algorithms"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ClientHello",
      "checkExtensions"
    ]
  },
  "5246-EMvcCVyKtv": {
    "description": "If the version chosen by the server is not supported by the client (or not acceptable), the client MUST send a \"protocol_version\" alert message and close the connection.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "E.1. Compatibility with TLS 1.0/1.1 and SSL 3.0"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "E1CompatibilityWithTLS10_11andSSL30",
      "selectUnsupportedVersion"
    ]
  },
  "5246-uMW2Qzjt88": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake, Alert, or ChangeCipherSpec content types. Zero-length fragments of Application data MAY be sent as they are potentially useful as a traffic analysis countermeasure.",
    "severityLevels": {
      "Handshake": 60,
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendZeroLengthRecord_SH"
    ]
  },
  "5246-FsvDkXCwAy": {
    "description": "Client message boundaries are not preserved in the record layer (i.e., multiple client messages of the same ContentType MAY be coalesced into a single TLSPlaintext record, or a single message MAY be fragmented across several records).",
    "severityLevels": {
      "Handshake": 60,
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendHandshakeMessagesWithinSingleRecord"
    ]
  },
  "5246-YnrTYxwh4n": {
    "description": "If a client receives an extension type in ServerHello that it did not request in the associated ClientHello, it MUST abort the handshake with an unsupported_extension fatal alert.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4. Hello Extensions"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerHello",
      "sendAdditionalExtension"
    ]
  },
  "5246-UXM2CG5DPA": {
    "description": "The single compression algorithm selected by the server from the list in ClientHello.compression_methods.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.3.  Server Hello"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerHello",
      "selectUnproposedCompressionMethod"
    ]
  },
  "5246-zqCFt52rqY": {
    "description": "The client verifies the signature (when present) and retrieves the server's elliptic curve domain parameters and ephemeral ECDH public key from the ServerKeyExchange message.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.4 Server Key Exchange"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "invalidServerKeyExchangeSignature"
    ]
  },
  "5246-wPU1BxUpeu": {
    "description": "A possible reason for a fatal handshake failure is that the client's capabilities for handling elliptic curves and point formats are exceeded",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.4 Server Key Exchange"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "acceptsUnproposedNamedGroup"
    ]
  },
  "5246-cNKtuNg3Lc": {
    "description": "A possible reason for a fatal handshake failure is that the client's capabilities for handling elliptic curves and point formats are exceeded",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.4 Server Key Exchange"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "acceptsUnproposedNamedGroupStatic"
    ]
  },
  "5246-KAA9dJJg3h": {
    "description": "The client verifies the signature (when present) and retrieves the server's elliptic curve domain parameters and ephemeral ECDH public key from the ServerKeyExchange message.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.4 Server Key Exchange"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "acceptsMissingSignature"
    ]
  },
  "5246-xTN7vXv2VU": {
    "description": "The client verifies the signature (when present) and retrieves the server's elliptic curve domain parameters and ephemeral ECDH public key from the ServerKeyExchange message.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.4 Server Key Exchange"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "acceptsAnonSignatureForNonAnonymousCipherSuite"
    ]
  },
  "5246-1Bsg5xe2cv": {
    "description": "If the client has offered the \"signature_algorithms\" extension, the signature algorithm and hash algorithm MUST be a pair listed in that extension. ",
    "severityLevels": {
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.4 Server Key Exchange"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "acceptsUnproposedSignatureAndHash"
    ]
  },
  "5246-AnX5PH2NS5": {
    "description": "Implementations MUST NOT send record types not defined in this document unless negotiated by some extension. If a TLS implementation receives an unexpected record type, it MUST send an unexpected_message alert.",
    "severityLevels": {
      "Handshake": 40,
      "RecordLayer": 40,
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6. The TLS Record Protocol"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "TLSRecordProtocol",
      "sendNotDefinedRecordTypesWithServerHello"
    ]
  },
  "5246-Y2z3WpemKt": {
    "description": "Implementations MUST NOT send record types not defined in this document unless negotiated by some extension. If a TLS implementation receives an unexpected record type, it MUST send an unexpected_message alert.",
    "severityLevels": {
      "Handshake": 40,
      "RecordLayer": 40,
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6. The TLS Record Protocol"
    },
    "tags": [
      "client",
      "tls12",
      "rfc5246",
      "TLSRecordProtocol",
      "sendNotDefinedRecordTypesWithCCSAndFinished"
    ]
  },
  "6066-WpGEGtHscM": {
    "description": "Similarly, if a client receives a maximum fragment length negotiation response that differs from the length it requested, it MUST also abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 6066,
      "section": "4. Maximum Fragment Length Negotiation"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6066",
      "MaximumFragmentLength",
      "invalidMaximumFragmentLength"
    ]
  },
  "6066-ossqki78mA": {
    "description": "Similarly, if a client receives a maximum fragment length negotiation response that differs from the length it requested, it MUST also abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 6066,
      "section": "4. Maximum Fragment Length Negotiation"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6066",
      "MaximumFragmentLength",
      "unrequestedMaximumFragmentLength"
    ]
  },
  "6066-XXJU5VtxbB": {
    "description": "Once a maximum fragment length other than 2^14 has been successfully negotiated, the client and server MUST immediately begin fragmenting messages (including handshake messages) to ensure that no fragment larger than the negotiated length is sent.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60
    },
    "rfc": {
      "number": 6066,
      "section": "4. Maximum Fragment Length Negotiation"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6066",
      "MaximumFragmentLength",
      "respectsNegotiatedMaxFragmentLength"
    ]
  },
  "6066-E12eJCyta7": {
    "description": "The ServerNameList MUST NOT contain more than one name of the same name_type.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60
    },
    "rfc": {
      "number": 6066,
      "section": "3. Server Name Indication"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6066",
      "ServerNameIndication",
      "moreThanOneNameOfTheSameType"
    ]
  },
  "6176-yZUPDLF21Z": {
    "description": "TLS clients MUST NOT send the SSL version 2.0 compatible CLIENT- HELLO message format.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60
    },
    "rfc": {
      "number": 6176,
      "section": "3.  Changes to TLS"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6176",
      "ProhibitingSSLv2",
      "sendSSL2CompatibleClientHello"
    ]
  },
  "6176-GVZT3xHaGE": {
    "description": "TLS servers MUST NOT reply with an SSL 2.0 SERVER-HELLO with a protocol version that is less than { 0x03, 0x00 } and instead MUST abort the connection",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 6176,
      "section": "3.  Changes to TLS"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6176",
      "ProhibitingSSLv2",
      "sendServerHelloVersionLower0300"
    ]
  },
  "6176-1zkQSbX7Qy": {
    "description": "Clients MUST NOT send any ClientHello message that specifies a protocol version less than { 0x03, 0x00 }.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60
    },
    "rfc": {
      "number": 6176,
      "section": "3.  Changes to TLS"
    },
    "tags": [
      "client",
      "tls12",
      "rfc6176",
      "ProhibitingSSLv2",
      "testClientHelloProtocolVersion"
    ]
  },
  "7366-rCfTYbGUus": {
    "description": "If a server receives an encrypt-then-MAC request extension from a client and then selects a stream or Authenticated Encryption with Associated Data (AEAD) ciphersuite, it MUST NOT send an encrypt-then-MAC response extension back to the client.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 7366,
      "section": "3.  Applying Encrypt-then-MAC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7366",
      "EncThenMacExtension",
      "sendEncThenMacExtWithNonBlockCiphers"
    ]
  },
  "7366-2aUxJrnngy": {
    "description": "Once the use of encrypt-then-MAC has been negotiated, processing of TLS/DTLS packets switches from the standard: [...]encrypt( data || MAC || pad ) [...]to the new:[...]encrypt( data || pad ) || MAC",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7366,
      "section": "3.  Applying Encrypt-then-MAC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7366",
      "EncThenMacExtension",
      "encryptThenMacTest"
    ]
  },
  "7465-Het2o2vRcv": {
    "description": "TLS clients MUST NOT include RC4 cipher suites in the ClientHello message.",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 80,
      "Security": 80,
      "Handshake": 60
    },
    "rfc": {
      "number": 7465,
      "section": "2"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7465",
      "RC4Ciphersuites",
      "offersRC4Ciphersuites"
    ]
  },
  "7465-pUNK4mxZNB": {
    "description": "TLS servers MUST NOT select an RC4 cipher suite when a TLS client sends such a cipher suite in the ClientHello message.",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 80,
      "Security": 100,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 7465,
      "section": "2"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7465",
      "RC4Ciphersuites",
      "selectRC4CipherSuite"
    ]
  },
  "7507-YMY8CHMEzt": {
    "description": "If a client sets ClientHello.client_version to its highest supported protocol version, it MUST NOT include TLS_FALLBACK_SCSV in ClientHello.cipher_suites.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7507,
      "section": "4. Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7507",
      "SCSV",
      "doesNotIncludeFallbackCipherSuite"
    ]
  },
  "7568-BiD6J3KQPu": {
    "description": "SSLv3 MUST NOT be used. Negotiation of SSLv3 from any version of TLS MUST NOT be permitted. [...]Pragmatically, clients MUST NOT send a ClientHello with ClientHello.client_version set to {03,00}.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60
    },
    "rfc": {
      "number": 7568,
      "section": "3. Do Not Use SSL Version 3.0"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7568",
      "DoNotUseSSLVersion30",
      "sendClientHelloVersion0300"
    ]
  },
  "7685-9JJaftYtP3": {
    "description": "The client MUST fill the padding extension completely with zero bytes, although the padding extension_data field may be empty.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 40
    },
    "rfc": {
      "number": 7685,
      "section": "3"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7685",
      "PaddingExtension",
      "paddingWithNonZero"
    ]
  },
  "7919-vE2y2kZU5J": {
    "description": "[...] the client MUST verify that dh_Ys is in the range 1 < dh_Ys < dh_p - 1.  If dh_Ys is not in this range, the client MUST terminate the connection with a fatal handshake_failure(40) alert. [...]Peers MUST validate each other's public key Y (dh_Ys offered by the server or dh_Yc offered by the client) by ensuring that 1 < Y < p-1.",
    "severityLevels": {
      "Handshake": 20,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 7919,
      "section": "3. Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "shareOutOfBounds"
    ]
  },
  "7919-D3SJNRC99x": {
    "description": "If the client also supports and wants to offer ECDHE key exchange, it MUST use a single Supported Groups extension to include all supported groups (both ECDHE and FFDHE groups).",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 7919,
      "section": "3. Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "listsCurvesAndFfdheCorrectly"
    ]
  },
  "7919-ZZzQLMYM3L": {
    "description": "A client that offers a group MUST be able and willing to perform a DH key exchange using that group.",
    "severityLevels": {
      "Crypto": 60,
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 7919,
      "section": "3. Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "supportsOfferedFfdheGroup"
    ]
  },
  "7919-64FAvRFA4A": {
    "description": "This document cannot enumerate all possible safe local policy (the safest may be to simply reject all custom groups), but compatible clients that accept some custom groups from the server MUST do at least cursory checks on group size and may take other properties into consideration as well. [...]A compatible client that accepts FFDHE cipher suites using custom groups from non-compatible servers MUST reject any group with |dh_p| < 768 bits",
    "severityLevels": {
      "Crypto": 60,
      "Security": 100,
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 7919,
      "section": "3. Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "performsRequiredSecurityCheck"
    ]
  },
  "8422-exVPmQoGGM": {
    "description": "A client compliant with this specification that supports no other curves MUST send the following octets; note that the first two octets indicate the extension type (Supported Point Formats Extension)[...]If the Supported Point Formats Extension is indeed sent, it MUST contain the value 0 (uncompressed) as one of the items in the list of point formats. [...]Implementations of this document MUST support the uncompressed format for all of their supported curves and MUST NOT support other formats for curves defined in this specification.  For backwards compatibility purposes, the point format list extension MAY still be included and contain exactly one value: the uncompressed point format (0).",
    "severityLevels": {
      "DeprecatedFeature": 60,
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "invalidPointFormat"
    ]
  },
  "8422-zPzy3N3kzG": {
    "description": "RFC 4492 defined 25 different curves in the NamedCurve registry (now renamed the \"TLS Supported Groups\" registry, although the enumeration below is still named NamedCurve) for use in TLS. Only three have seen much use. This specification is deprecating the rest (with numbers 1-22).",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 60,
      "Security": 60,
      "Handshake": 60
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "offeredDeprecatedGroup"
    ]
  },
  "8422-A5SiH3AcVB": {
    "description": "With the NIST curves, each party MUST validate the public key sent by its peer in the ClientKeyExchange and ServerKeyExchange messages.  A receiving party MUST check that the x and y parameters from the peer's public value satisfy the curve equation, y^2 = x^3 + ax + b mod p.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 80,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "rejectsInvalidCurvePoints"
    ]
  },
  "8422-nGxjfcCt1i": {
    "description": "if either party obtains all-zeroes x_S, it MUST abort the handshake (as required by definition of X25519 and X448). [...]With X25519 and X448, a receiving party MUST check whether the computed premaster secret is the all-zero value and abort the handshake if so",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "abortsWhenSharedSecretIsZero"
    ]
  },
  "8422-DknikJ9VC5": {
    "description": "A client that receives a ServerHello message containing a Supported Point Formats Extension MUST respect the server's choice of point formats during the handshake (cf.  Sections 5.6 and 5.7).",
    "severityLevels": {
      "Interoperability": 60
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "respectsPointFormat"
    ]
  },
  "8422-jJBYYpiKBH": {
    "description": "The client MUST NOT include these extensions in the ClientHello message if it does not propose any ECC cipher suites.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "offersExtensionsWithoutCipher"
    ]
  },
  "8701-1yNET6C4bb": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"version\" value in a ServerHello or HelloRetryRequest",
    "severityLevels": {
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "3.1 Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "selectGreaseVersion"
    ]
  },
  "8701-tEzdghyrj5": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"cipher_suite\" value in a ServerHello",
    "severityLevels": {
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "3.1 Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "selectGreaseCipherSuite"
    ]
  },
  "8701-KSVZP6dF7j": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] Any ServerHello extension",
    "severityLevels": {
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "3.1 Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "sendServerHelloGreaseExtension"
    ]
  },
  "8701-Dct8jKkrvf": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"namedcurve\" value in a ServerKeyExchange for an Ephemeral Elliptic Curve Diffie-Hellman (ECDHE) cipher in TLS 1.2 [RFC5246] or earlier",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "3.1 Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "selectGreaseNamedGroup"
    ]
  },
  "8701-1YAGJouHo8": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The signature algorithm in a ServerKeyExchange signature in TLS 1.2 or earlier",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "3.1 Client Behavior"
    },
    "tags": [
      "client",
      "tls12",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "selectGreaseSignatureAlgorithm"
    ]
  },
  "XSM-g5sZueNdGS": {
    "description": "Omit the Certificate Message for non-anonymous Cipher Suite",
    "severityLevels": {
      "Security": 80,
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "omitCertificate"
    ]
  },
  "XSM-YWHyrAVFo3": {
    "description": "Omit the Change Cipher Spec Message and send Finished encrypted",
    "severityLevels": {
      "Security": 40,
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "omitChangeCipherSpecEncryptedFinished"
    ]
  },
  "XSM-TPgoAceVQB": {
    "description": "Send two Server Hellos as the first server messages",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendServerHelloTwice"
    ]
  },
  "XSM-jnFHuGoQR3": {
    "description": "Send a second ServerHello after the client's Finished has been received",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendSecondServerHelloAfterClientFinished"
    ]
  },
  "XSM-SJ9mzNY9kZ": {
    "description": "Send ServerHello, Change CipherSpec",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendResumptionMessageFlow"
    ]
  },
  "XSM-Rdcvemgd4h": {
    "description": "Begin the Handshake with a Finished Message",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "beginWithFinished"
    ]
  },
  "XSM-Bv4mqPoKa4": {
    "description": "Begin the Handshake with Application Data",
    "severityLevels": {
      "Security": 100,
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls12",
      "statemachine",
      "StateMachine",
      "beginWithApplicationData"
    ]
  },
  "8446-FnJguFLqcc": {
    "description": "cipher_suites:  A list of the symmetric cipher options supported by the client, specifically the record protection algorithm (including secret key length) and a hash to be used with HKDF, in descending order of client preference.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "9.3.  Protocol Invariants"
    },
    "tags": [
      "client",
      "tls13",
      "SupportedCiphersuites",
      "supportsMoreCipherSuitesThanAdvertised"
    ]
  },
  "8446-CFyJvy1SNZ": {
    "description": "For this to work, implementations MUST correctly handle extensible fields:[...] A client sending a ClientHello MUST support all parameters advertised in it.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "9.3.  Protocol Invariants"
    },
    "tags": [
      "client",
      "tls13",
      "SupportedCiphersuites",
      "supportsLessCipherSuitesThanAdvertised"
    ]
  },
  "8446-vN4oMaYkC6": {
    "description": "If the server supplies an empty Certificate message, the client MUST abort the handshake with a \"decode_error\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 100,
      "Certificate": 100,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.2.4. Receiving a Certificate Message"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "Certificate",
      "emptyCertificateMessage"
    ]
  },
  "8446-cM4fvnBMce": {
    "description": "If the server supplies an empty Certificate message, the client MUST abort the handshake with a \"decode_error\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 100,
      "Certificate": 100,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.2.4. Receiving a Certificate Message"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "Certificate",
      "emptyCertificateList"
    ]
  },
  "8446-oN7MGas4sq": {
    "description": "RSA signatures MUST use an RSASSA-PSS algorithm, regardless of whether RSASSA-PKCS1-v1_5 algorithms appear in \"signature_algorithms\". The SHA-1 algorithm MUST NOT be used in any signatures of CertificateVerify messages. All SHA-1 signature algorithms in this specification are defined solely for use in legacy certificates and are not valid for CertificateVerify signatures.",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 60,
      "Security": 60,
      "Certificate": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "selectLegacyRSASignatureAlgorithm"
    ]
  },
  "8446-LNoEKntfip": {
    "description": "The SHA-1 algorithm MUST NOT be used in any signatures of CertificateVerify messages. All SHA-1 signature algorithms in this specification are defined solely for use in legacy certificates and are not valid for CertificateVerify signatures.",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 60,
      "Security": 60,
      "Certificate": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "selectLegacyECDSASignatureAlgorithm"
    ]
  },
  "8446-cEg5hNM3Lm": {
    "description": "The receiver of a CertificateVerify message MUST verify the signature field. [...] If the verification fails, the receiver MUST terminate the handshake with a \"decrypt_error\" alert.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Certificate": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "invalidSignature"
    ]
  },
  "8446-NYgNsg97bX": {
    "description": "If the CertificateVerify message is sent by a server, the signature algorithm MUST be one offered in the client's \"signature_algorithms\" extension unless no valid certificate chain can be produced without unsupported algorithms",
    "severityLevels": {
      "Crypto": 80,
      "Security": 80,
      "Certificate": 80,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "acceptsUnproposedSignatureAndHash"
    ]
  },
  "8446-HKxd74FVbC": {
    "description": "The receiver of a CertificateVerify message MUST verify the signature field.  [...] If the verification fails, the receiver MUST terminate the handshake with a \"decrypt_error\" alert.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Certificate": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "emptySignature"
    ]
  },
  "8446-CZWhi6PJvQ": {
    "description": "The receiver of a CertificateVerify message MUST verify the signature field.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 80,
      "Certificate": 80,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "emptySigAlgorithm"
    ]
  },
  "8446-AptaW3C62X": {
    "description": "The receiver of a CertificateVerify message MUST verify the signature field.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Certificate": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "emptyBoth"
    ]
  },
  "8446-bejcyb2cLf": {
    "description": "The client MUST send a Certificate message if and only if the server has requested client authentication via a CertificateRequest message (Section 4.3.2).[...] If the server requests client authentication but no suitable certificate is available, the client MUST send a Certificate message containing no certificates [...] A Finished message MUST be sent regardless of whether the Certificate message is empty.",
    "severityLevels": {
      "Handshake": 60,
      "Certificate": 40,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.2. Certificate"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ClientAuthentication",
      "clientSendsCertificateAndFinMessage"
    ]
  },
  "8446-Agnoga6SCd": {
    "description": "In TLS 1.3, the client indicates its version preferences in the \"supported_versions\" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2.  TLS 1.3 ClientHellos are identified as having a legacy_version of 0x0303 and a supported_versions extension present with 0x0304 as the highest version indicated therein.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ClientHello",
      "checkLegacyVersion"
    ]
  },
  "8446-eMuKxJmUfq": {
    "description": "There MUST NOT be more than one extension of the same type in a given extension block. [...]Clients MUST NOT use cookies in their initial ClientHello in subsequent connections. [...]Implementations MUST NOT use the Truncated HMAC extension",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ClientHello",
      "checkExtensionsValidity"
    ]
  },
  "8446-u9JfnwgsWH": {
    "description": "A client is considered to be attempting to negotiate using this specification if the ClientHello contains a \"supported_versions\" extension with 0x0304 contained in its body.  Such a ClientHello message MUST meet the following requirements: [...]If not containing a \"pre_shared_key\" extension, it MUST contain both a \"signature_algorithms\" extension and a \"supported_groups\" extension. [...]If containing a \"supported_groups\" extension, it MUST also contain a \"key_share\" extension, and vice versa.  An empty KeyShare.client_shares vector is permitted.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ClientHello",
      "checkMandatoryExtensions"
    ]
  },
  "8446-Q2RbRWjAdJ": {
    "description": "In compatibility mode (see Appendix D.4), this field MUST be non-empty, so a client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value.  This value need not be random but SHOULD be unpredictable to avoid implementations fixating on a specific value (also known as ossification).  Otherwise, it MUST be set as a zero-length vector (i.e., a zero-valued single byte length field).",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ClientHello",
      "checkLegacySessionId"
    ]
  },
  "8446-C9aFBzrCbX": {
    "description": "Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.2 Cookie"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "Cookie",
      "clientHelloContainsCookieExtension"
    ]
  },
  "8446-X68SWFRBVS": {
    "description": "The client MUST check EncryptedExtensions for the presence of any forbidden extensions and if any are found MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.3.1. Encrypted Extensions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "EncryptedExtensions",
      "sendSupportedVersionsExtensionInEE"
    ]
  },
  "8446-U5uSdqYohP": {
    "description": "The client MUST check EncryptedExtensions for the presence of any forbidden extensions and if any are found MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.3.1. Encrypted Extensions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "EncryptedExtensions",
      "sendPaddingExtensionInEE"
    ]
  },
  "8446-34CYsV98Fs": {
    "description": "Similarly, if a client receives a maximum fragment length negotiation response that differs from the length it requested, it MUST also abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.3.1. Encrypted Extensions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "EncryptedExtensions",
      "invalidMaximumFragmentLength"
    ]
  },
  "8446-XDu7chdPTM": {
    "description": "Similarly, if a client receives a maximum fragment length negotiation response that differs from the length it requested, it MUST also abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.3.1. Encrypted Extensions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "EncryptedExtensions",
      "unrequestedMaximumFragmentLength"
    ]
  },
  "8446-guYpWN18yk": {
    "description": "Implementations MUST NOT send extension responses if the remote endpoint did not send the corresponding extension requests, with the exception of the \"cookie\" extension in the HelloRetryRequest. Upon receiving such an extension, an endpoint MUST abort the handshake with an \"unsupported_extension\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2 Extensions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "Extensions",
      "sendAdditionalExtension"
    ]
  },
  "8446-6dvAUhLdUW": {
    "description": "If an implementation receives an extension which it recognizes and which is not specified for the message in which it appears, it MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2 Extensions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "Extensions",
      "sendHeartBeatExtensionInSH"
    ]
  },
  "8446-2L9AK4xSva": {
    "description": "Upon receipt of this extension in a HelloRetryRequest, the client MUST verify that (1) the selected_group field corresponds to a group which was provided in the \"supported_groups\" extension in the original ClientHello and [...] If either of these checks fails, then the client MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryRequestsUnofferedGroup"
    ]
  },
  "8446-bfziReZMw4": {
    "description": "A client which receives a cipher suite that was not offered MUST abort the handshake.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryRequestsUnofferedTls13CipherSuite"
    ]
  },
  "8446-s2k4bG3Gz9": {
    "description": "Clients MUST abort the handshake with an \"illegal_parameter\" alert if the HelloRetryRequest would not result in any change in the ClientHello.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryRequestResultsInNoChanges"
    ]
  },
  "8446-FviCUju7gw": {
    "description": "If a client receives a second HelloRetryRequest in the same connection (i.e., where the ClientHello was itself in response to a HelloRetryRequest), it MUST abort the handshake with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "sendSecondHelloRetryRequest"
    ]
  },
  "8446-f3pZavKkyP": {
    "description": "Upon receiving the ServerHello, clients MUST check that the cipher suite supplied in the ServerHello is the same as that in the HelloRetryRequest and otherwise abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "cipherSuiteDisparity"
    ]
  },
  "8446-KLkH56oYzC": {
    "description": "If using (EC)DHE key establishment and a HelloRetryRequest containing a \"key_share\" extension was received by the client, the client MUST verify that the selected NamedGroup in the ServerHello is the same as that in the HelloRetryRequest.  If this check fails, the client MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "namedGroupDisparity"
    ]
  },
  "8446-ncR52WSgGx": {
    "description": "The value of selected_version in the HelloRetryRequest \"supported_versions\" extension MUST be retained in the ServerHello, and a client MUST abort the handshake with an \"illegal_parameter\" alert if the value changes.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "versionDisparity"
    ]
  },
  "8446-6X9hLRk9V4": {
    "description": "A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryLegacySessionId"
    ]
  },
  "8446-dyTnCEsFo1": {
    "description": "legacy_compression_method: A single byte which MUST have the value 0.",
    "severityLevels": {
      "DeprecatedFeature": 80,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryCompressionValue"
    ]
  },
  "8446-qN6nNMX9Sx": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"cipher_suite\" value in a ServerHello",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryGreaseCipherSuite"
    ]
  },
  "8446-TyCkZKkVMt": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] Any ServerHello extension",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryGreaseExtension"
    ]
  },
  "8446-vU6BQin9Eo": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"version\" value in a ServerHello or HelloRetryRequest",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryGreaseVersionSelected"
    ]
  },
  "8446-5NRGuXE3Em": {
    "description": "The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows: [...]Upon receiving a message with type server_hello, implementations MUST first examine the Random value and, if it matches this value, process it as described in Section 4.1.4). [...]Otherwise, the client MUST process all extensions in the HelloRetryRequest and send a second updated ClientHello. [...]Otherwise, when sending the new ClientHello, the client MUST replace the original \"key_share\" extension with one containing only a new KeyShareEntry for the group indicated in the selected_group field of the triggering HelloRetryRequest. [...]legacy_record_version:  MUST be set to 0x0303 for all records generated by a TLS 1.3 implementation other than an initial ClientHello [...]In order to maximize backward compatibility, a record containing an initial ClientHello SHOULD have version 0x0301 (reflecting TLS 1.0) and a record containing a second ClientHello or a ServerHello MUST have version 0x0303 (reflecting TLS 1.2).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "actsCorrectlyUponHelloRetryRequest"
    ]
  },
  "8446-7byKPGEA8Q": {
    "description": "Similarly, cipher suites for TLS 1.2 and lower cannot be used with TLS 1.3.",
    "severityLevels": {
      "Security": 40,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryRequestsTls12CipherSuite"
    ]
  },
  "8446-2v6S87AwgY": {
    "description": "When sending the new ClientHello, the client MUST copy the contents of the extension received in the HelloRetryRequest into a \"cookie\" extension in the new ClientHello.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "copiesCookieValue"
    ]
  },
  "8446-WtTcgsZFA3": {
    "description": "Each KeyShareEntry value MUST correspond to a group offered in the \"supported_groups\" extension and MUST appear in the same order. [...]Clients MUST NOT offer multiple KeyShareEntry values for the same group.  Clients MUST NOT offer any KeyShareEntry values for groups not listed in the client's \"supported_groups\" extension.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "KeyShare",
      "testOrderOfKeyshareEntries"
    ]
  },
  "8446-F9bWYMiB45": {
    "description": "If using (EC)DHE key establishment, servers offer exactly one KeyShareEntry in the ServerHello. This value MUST be in the same group as the KeyShareEntry value offered by the client that the server has selected for the negotiated key exchange.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "KeyShare",
      "selectInvalidKeyshare"
    ]
  },
  "8446-YMYRto48Jg": {
    "description": "For the curves secp256r1, secp384r1, and secp521r1, peers MUST validate each other's public value Q by ensuring that the point is a valid point on the elliptic curve.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "KeyShare",
      "rejectsPointsNotOnCurve"
    ]
  },
  "8446-h4RyAhoVZy": {
    "description": "For X25519 and X448, [...]For these curves, implementations SHOULD use the approach specified in [RFC7748] to calculate the Diffie-Hellman shared secret. Implementations MUST check whether the computed Diffie-Hellman shared secret is the all-zero value and abort if so",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "KeyShare",
      "abortsWhenSharedSecretIsZero"
    ]
  },
  "8446-JKvCjP5mKE": {
    "description": "secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019), x25519(0x001D), x448(0x001E),",
    "severityLevels": {
      "DeprecatedFeature": 80,
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "KeyShare",
      "offeredDeprecatedGroups"
    ]
  },
  "8446-QxfMDM9cBK": {
    "description": "Peers MUST validate each other's public key Y by ensuring that 1 < Y < p-1.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "KeyShare",
      "ffdheShareOutOfBounds"
    ]
  },
  "8446-b7XLVJA8Pn": {
    "description": "A set of extension values for the ticket.  The \"Extension\" format is defined in Section 4.2.  Clients MUST ignore unrecognized extensions. [...]In TLS 1.3, a client receiving a CertificateRequest or NewSessionTicket MUST also ignore all unrecognized extensions.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.6.1. New Session Ticket Message"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "NewSessionTicket",
      "ignoresUnknownNewSessionTicketExtension"
    ]
  },
  "8446-v48HMDRHVT": {
    "description": "The \"pre_shared_key\" extension MUST be the last extension in the ClientHello",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11. Pre-Shared Key Extension"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "isLastExtension"
    ]
  },
  "8446-t4AtKzmU9J": {
    "description": "The server MUST NOT send a \"psk_key_exchange_modes\" extension.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.9 Pre-Shared Key Exchane Modes"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "PreSharedKeyExchangeModes",
      "sendPSKModeExtension"
    ]
  },
  "8446-i8hwrTotPM": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake types, even if those fragments contain padding.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "zeroLengthRecord_ServerHello"
    ]
  },
  "8446-2R6GNvoUEs": {
    "description": "Implementations MUST NOT send Handshake and Alert records that have a zero-length TLSInnerPlaintext.content; if such a message is received, the receiving implementation MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "zeroLengthRecord_Finished"
    ]
  },
  "8446-BbKKCCtSdd": {
    "description": "Handshake messages MUST NOT be interleaved with other record types. That is, if a handshake message is split over two or more records, there MUST NOT be any other records between them.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "interleaveRecords"
    ]
  },
  "8446-m6iEnsoJCw": {
    "description": "Send a record without any content to increase the sequencenumber.",
    "severityLevels": {
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "sendEmptyZeroLengthRecords"
    ]
  },
  "8446-VNQgpDNZVS": {
    "description": "Handshake messages MUST NOT span key changes. Implementations MUST verify that all messages immediately preceding a key change align with a record boundary; if not, then they MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "incompleteCertVerifyBeforeFinished"
    ]
  },
  "8446-zgsrCx4EDP": {
    "description": "A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testSessionId"
    ]
  },
  "8446-2yeDE1Bso6": {
    "description": "A client which receives a cipher suite that was not offered MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testCipherSuite"
    ]
  },
  "8446-oEdBWdqUnm": {
    "description": "legacy_compression_method: A single byte which MUST have the value 0.",
    "severityLevels": {
      "DeprecatedFeature": 80,
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testCompressionValue"
    ]
  },
  "8446-TyxxKdqwv3": {
    "description": "TLS 1.3 clients receiving a ServerHello indicating TLS 1.2 or below MUST check that the last 8 bytes are not equal to either of these values. [...] If a match is found, the client MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testRandomDowngradeValue"
    ]
  },
  "8446-qibaoRRFDr": {
    "description": "Note that TLS 1.2 defines this extension differently.  TLS 1.3 implementations willing to negotiate TLS 1.2 MUST behave in accordance with the requirements of [RFC5246] when negotiating that version. In particular:[...]ECDSA signature schemes align with TLS 1.2's ECDSA hash/signature pairs.  However, the old semantics did not constrain the signing curve.  If TLS 1.2 is negotiated, implementations MUST be prepared to accept a signature that uses any curve that they advertised in the \"supported_groups\" extension.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.3. Signature Algorithms"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "acceptsMixedCurveHashLengthInTls12"
    ]
  },
  "8446-qNaBPZ4ofA": {
    "description": "Note that TLS 1.2 defines this extension differently.  TLS 1.3 implementations willing to negotiate TLS 1.2 MUST behave in accordance with the requirements of [RFC5246] when negotiating that version. In particular:[...]Implementations that advertise support for RSASSA-PSS (which is mandatory in TLS 1.3) MUST be prepared to accept a signature using that scheme even when TLS 1.2 is negotiated.  In TLS 1.2, RSASSA-PSS is used with RSA cipher suites.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.3. Signature Algorithms"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "supportsRsaPssInTls12"
    ]
  },
  "8446-5E3CVBTFdt": {
    "description": "Note that TLS 1.2 defines this extension differently.  TLS 1.3 implementations willing to negotiate TLS 1.2 MUST behave in accordance with the requirements of [RFC5246] when negotiating that version. In particular:[...]In TLS 1.2, the extension contained hash/signature pairs.  The pairs are encoded in two octets, so SignatureScheme values have been allocated to align with TLS 1.2's encoding.  Some legacy pairs are left unallocated.  These algorithms are deprecated as of TLS 1.3.  They MUST NOT be offered or negotiated by any implementation.  In particular, MD5 [SLOTH], SHA-224, and DSA MUST NOT be used.",
    "severityLevels": {},
    "rfc": {
      "number": 8446,
      "section": "4.2.3. Signature Algorithms"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "noDeprecatedAlgorithmsOffered"
    ]
  },
  "8446-oysw9PbeiT": {
    "description": "If this extension is present, clients MUST ignore the ServerHello.legacy_version value and MUST use only the \"supported_versions\" extension to determine the selected version.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "invalidLegacyVersion"
    ]
  },
  "8446-w9k9gMLaeU": {
    "description": "If the \"supported_versions\" extension in the ServerHello contains a version not offered by the client or contains a version prior to TLS 1.3, the client MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "selectOlderTlsVersionInTls12"
    ]
  },
  "8446-YDjQAqZ2LM": {
    "description": "If the \"supported_versions\" extension in the ServerHello contains a version not offered by the client or contains a version prior to TLS 1.3, the client MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "selectOlderTlsVersion"
    ]
  },
  "8446-o5uxfywWFS": {
    "description": "Implementations of this specification MUST send this extension in the ClientHello containing all versions of TLS which they are prepared to negotiate (for this specification, that means minimally 0x0304, but if previous versions of TLS are allowed to be negotiated, they MUST be present as well).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "supportedVersionContainsTls13"
    ]
  },
  "8446-cck1BzgJ1h": {
    "description": "The \"supported_versions\" extension is used by the client to indicate which versions of TLS it supports and by the server to indicate which version it is using.  The extension contains a list of supported versions in preference order, with the most preferred version first. [...]If the version chosen by the server is not supported by the client (or is not acceptable), the client MUST abort the handshake with a \"protocol_version\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "negotiateUnproposedOldProtocolVersion"
    ]
  },
  "8446-eNP4DYhWjk": {
    "description": "The \"supported_versions\" extension is used by the client to indicate which versions of TLS it supports and by the server to indicate which version it is using.  The extension contains a list of supported versions in preference order, with the most preferred version first. [...]If the version chosen by the server is not supported by the client (or is not acceptable), the client MUST abort the handshake with a \"protocol_version\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "legacyNegotiateUndefinedProtocolVersion"
    ]
  },
  "8701-91tcbyhyNk": {
    "description": "When sending a NewSessionTicket message in TLS 1.3, a server MAY select one or more GREASE extension values and advertise them as extensions with varying length and contents. [...]When processing a CertificateRequest or NewSessionTicket, clients MUST NOT treat GREASE values differently from any unknown value.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8701,
      "section": "4. Server-Initiated Extension Points"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "advertiseGreaseExtensionsInSessionTicket"
    ]
  },
  "8701-q8vvYUsUCu": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"version\" value in a ServerHello or HelloRetryRequest",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8701,
      "section": "4. Server-Initiated Extension Points"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "selectGreaseVersion"
    ]
  },
  "8701-xwVd59Y3Fq": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The \"cipher_suite\" value in a ServerHello",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8701,
      "section": "4. Server-Initiated Extension Points"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "selectGreaseCipherSuite"
    ]
  },
  "8701-NczJT3TSj4": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] Any ServerHello extension",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8701,
      "section": "4. Server-Initiated Extension Points"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "sendServerHelloGreaseExtension"
    ]
  },
  "8701-pVCWxJraM8": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] Any HelloRetryRequest, EncryptedExtensions, or Certificate extension in TLS 1.3",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "4. Server-Initiated Extension Points"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "sendEncryptedExtensionsGreaseExtension"
    ]
  },
  "8701-9F3St2di12": {
    "description": "Clients MUST reject GREASE values when negotiated by the server. In particular, the client MUST fail the connection if a GREASE value appears in any of the following: [...] The signature algorithm in a server CertificateVerify signature in TLS 1.3",
    "severityLevels": {
      "Crypto": 100,
      "Handshake": 100,
      "Certificate": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8701,
      "section": "4. Server-Initiated Extension Points"
    },
    "tags": [
      "client",
      "tls13",
      "rfc8701",
      "ServerInitiatedExtensionPoints",
      "sendCertificateVerifyGreaseSignatureAlgorithm"
    ]
  },
  "XSM-LdxAqeL2Te": {
    "description": "CVE-2020-24613, Send Finished without Certificate",
    "severityLevels": {
      "CVE": 100,
      "Security": 100,
      "Handshake": 100,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendFinishedWithoutCert"
    ]
  },
  "XSM-2iKDTUhXF5": {
    "description": "An implementation which receives any other change_cipher_spec value or which receives a protected change_cipher_spec record MUST abort the handshake with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendHandshakeTrafficSecretEncryptedChangeCipherSpec"
    ]
  },
  "XSM-Xb6pAYY3fT": {
    "description": "An implementation which receives any other change_cipher_spec value or which receives a protected change_cipher_spec record MUST abort the handshake with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendAppTrafficSecretEncryptedChangeCipherSpec"
    ]
  },
  "XSM-sHFfpjZxQh": {
    "description": "If an implementation detects a change_cipher_spec record received before the first ClientHello message or after the peer's Finished message, it MUST be treated as an unexpected record type (though stateless servers may not be able to distinguish these cases from allowed cases).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyChangeCipherSpecAfterFinished"
    ]
  },
  "XSM-gN2Mz9wD2D": {
    "description": "Negotiate TLS 1.3 but send an unencrypted Certificate Message",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyFlowCertificate"
    ]
  },
  "XSM-aWBzNYEKwz": {
    "description": "Negotiate TLS 1.3 but send an unencrypted Certificate Message and legacy ECDHE Key Exchange Message",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyFlowECDHEKeyExchange"
    ]
  },
  "XSM-F8VTZ3optN": {
    "description": "Negotiate TLS 1.3 but send an unencrypted Certificate Message and legacy DHE Key Exchange Message",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyFlowDHEKeyExchange"
    ]
  },
  "XSM-iTKLQBFN9A": {
    "description": "Begin the Handshake with an Application Data Message",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "beginWithApplicationData"
    ]
  },
  "XSM-TQQj27kntr": {
    "description": "Begin the Handshake with a Finished Message",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "beginWithFinished"
    ]
  },
  "XSM-FLPgMqSvg9": {
    "description": "Send a second encrypted Server Hello",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendServerHelloTwice"
    ]
  },
  "XSM-LrxDfiLZM5": {
    "description": "Servers MUST NOT send this message, and clients receiving it MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.5. End of Early Data"
    },
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendEndOfEarlyDataAsServer"
    ]
  },
  "XSM-gN61eQrmNv": {
    "description": "Servers MUST send this message when authenticating via a certificate.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Certificate": 100,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3. Certificate Verify"
    },
    "tags": [
      "client",
      "tls13",
      "statemachine",
      "StateMachine",
      "omitCertificateVerify"
    ]
  },
  "5246-ANzf57gCyp": {
    "description": "Unless some other fatal alert has been transmitted, each party is required to send a close_notify alert before closing the write side of the connection. The other party MUST respond with a close_notify alert of its own and close down the connection immediately, discarding any pending writes.",
    "severityLevels": {
      "Interoperability": 40,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.2.1 Closure Alerts"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "AlertProtocol",
      "closeNotify"
    ]
  },
  "5246-fGCWkS7TDf": {
    "description": "Upon transmission or receipt of a fatal alert message, both parties immediately close the connection.",
    "severityLevels": {
      "Security": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.2.2 Error Alerts"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "AlertProtocol",
      "abortAfterFatalAlert_sendBeforeCCS"
    ]
  },
  "5246-hD2QPXyAHw": {
    "description": "Upon transmission or receipt of a fatal alert message, both parties immediately close the connection.",
    "severityLevels": {
      "Security": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.2.2 Error Alerts"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "AlertProtocol",
      "abortAfterFatalAlert_sendAfterServerHelloDone"
    ]
  },
  "5246-ZTQ27ZY8s8": {
    "description": "Here handshake_messages refers to all handshake messages sent or received, starting at client hello and up to, but not including, this message, including the type and length fields of the handshake messages. This is the concatenation of all the Handshake structures (as defined in Section 7.4) exchanged thus far.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 60,
      "Certificate": 100,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.8. Certificate Verify"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "CertificateVerify",
      "invalidCertificateVerify"
    ]
  },
  "5246-ST5MN96BuF": {
    "description": "If the list contains cipher suites the server does not recognize, support, or wish to use, the server MUST ignore those cipher suites, and process the remaining ones as usual.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2. Client Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ClientHello",
      "unknownCipherSuite"
    ]
  },
  "5246-P4AGQWTZsM": {
    "description": "This vector MUST contain, and all implementations MUST support, CompressionMethod.null. Thus, a client and server will always be able to agree on a compression method.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2. Client Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ClientHello",
      "unknownCompressionMethod"
    ]
  },
  "5246-YhZ7GJjrwk": {
    "description": "The rules specified in [TLSEXT] require servers to ignore extensions they do not understand.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2. Client Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ClientHello",
      "includeUnknownExtension"
    ]
  },
  "5246-RMehEjs346": {
    "description": "Send a ClientHello that offers many cipher suites",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2. Client Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ClientHello",
      "offerManyCipherSuites"
    ]
  },
  "5246-LtPf1AMt7Y": {
    "description": "A server MUST accept ClientHello messages both with and without the extensions field",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.2. Client Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ClientHello",
      "leaveOutExtensions"
    ]
  },
  "5246-1dbRcCn9si": {
    "description": "If a TLS server receives a ClientHello containing a version number greater than the highest version supported by the server, it MUST reply according to the highest version supported by the server.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 5246,
      "section": "E.1. Compatibility with TLS 1.0/1.1 and SSL 3.0"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "E1CompatibilityWithTLS10_11andSSL30",
      "versionGreaterThanSupportedByServer"
    ]
  },
  "5246-cBgzhL56ow": {
    "description": "If server supports (or is willing to use) only versions greater than client_version, it MUST send a \"protocol_version\" alert message and close the connection.",
    "severityLevels": {
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "E.1. Compatibility with TLS 1.0/1.1 and SSL 3.0"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "E1CompatibilityWithTLS10_11andSSL30",
      "versionLowerThanSupportedByServer"
    ]
  },
  "5246-YLok6XJr7R": {
    "description": "Thus, TLS servers compliant with this specification MUST accept any value {03,XX} as the record layer version number for ClientHello.",
    "severityLevels": {
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "E.1. Compatibility with TLS 1.0/1.1 and SSL 3.0"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "E1CompatibilityWithTLS10_11andSSL30",
      "acceptAnyRecordVersionNumber"
    ]
  },
  "5246-J6zSpKaaXP": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake, Alert, or ChangeCipherSpec content types. Zero-length fragments of Application data MAY be sent as they are potentially useful as a traffic analysis countermeasure.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendZeroLengthRecord_CH"
    ]
  },
  "5246-2FWjWfzv3Q": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake, Alert, or ChangeCipherSpec content types. Zero-length fragments of Application data MAY be sent as they are potentially useful as a traffic analysis countermeasure.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendZeroLengthRecord_Alert"
    ]
  },
  "5246-yNEWNcjFZF": {
    "description": "Client message boundaries are not preserved in the record layer (i.e., multiple client messages of the same ContentType MAY be coalesced into a single TLSPlaintext record, or a single message MAY be fragmented across several records).",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendHandshakeMessagesWithinMultipleRecords_CKE_CCS_F"
    ]
  },
  "5246-RNQeBZXVNc": {
    "description": "Client message boundaries are not preserved in the record layer (i.e., multiple client messages of the same ContentType MAY be coalesced into a single TLSPlaintext record, or a single message MAY be fragmented across several records).",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "6.2.1 Fragmentation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Fragmentation",
      "sendHandshakeMessagesWithinMultipleRecords_CKE_CCSF"
    ]
  },
  "5246-Zs3yXnQzh6": {
    "description": "A server that implements this extension MUST NOT accept the request to resume the session if the server_name extension contains a different name.",
    "severityLevels": {
      "Security": 40,
      "Handshake": 60,
      "Interoperability": 40
    },
    "rfc": {
      "number": 5246,
      "section": "F.1.4  Resuming Sessions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Resumption",
      "rejectSniDisparityResumption"
    ]
  },
  "5246-JmGqP73yfy": {
    "description": "When resuming a session, the server MUST NOT include a server_name extension in the server hello.",
    "severityLevels": {
      "Security": 40,
      "Handshake": 60,
      "Interoperability": 40
    },
    "rfc": {
      "number": 5246,
      "section": "F.1.4  Resuming Sessions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Resumption",
      "serverHelloSniInResumption"
    ]
  },
  "5246-5svSoN3NYm": {
    "description": "In this case, other connections corresponding to the session may continue, but the session identifier MUST be invalidated, preventing the failed session from being used to establish new connections. [...]Thus, any connection terminated with a fatal alert MUST NOT be resumed.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "F.1.4  Resuming Sessions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Resumption",
      "rejectResumptionAfterFatalPostHandshake"
    ]
  },
  "5246-qXpKD7cBiC": {
    "description": "Thus, any connection terminated with a fatal alert MUST NOT be resumed.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 5246,
      "section": "F.1.4  Resuming Sessions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "Resumption",
      "rejectResumptionAfterInvalidFinished"
    ]
  },
  "5246-VfW71fZRBF": {
    "description": "Client implementations MUST always send the correct version number in PreMasterSecret. If ClientHello.client_version is TLS 1.1 or higher, server implementations MUST check the version number as described in the note below. [...]In any case, a TLS server MUST NOT generate an alert if processing an RSA-encrypted premaster secret message fails, or the version number is not as expected.  Instead, it MUST continue the handshake with a randomly generated premaster secret.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 100,
      "Handshake": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.7.1"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "RSAEncryptedPremasterSecretMessage",
      "PMWithWrongClientVersion"
    ]
  },
  "5246-jnNzxCinX4": {
    "description": "In any case, a TLS server MUST NOT generate an alert if processing an RSA-encrypted premaster secret message fails, or the version number is not as expected.  Instead, it MUST continue the handshake with a randomly generated premaster secret.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 100,
      "Handshake": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.7.1"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "RSAEncryptedPremasterSecretMessage",
      "PMWithWrongPKCS1Padding"
    ]
  },
  "5246-rjHUSd1Lnf": {
    "description": "This structure is generated by the server and MUST be independently generated from the ClientHello.random.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.3. Server Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ServerHello",
      "serverRandom"
    ]
  },
  "5246-yM4KkM8m6m": {
    "description": "An extension type MUST NOT appear in the ServerHello unless the same extension type appeared in the corresponding ClientHello. [...]There MUST NOT be more than one extension of the same type. [...]Servers MUST NOT send this extension.  TLS servers MUST support receiving this extension.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.3. Server Hello"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ServerHello",
      "checkExtensions"
    ]
  },
  "5246-nZ7mATYszU": {
    "description": "Test if the Server sends Key Exchange Messages with valid signatures",
    "severityLevels": {
      "Crypto": 80,
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.3. Server Key Exchange Message"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "ServerKeyExchange",
      "signatureIsValid"
    ]
  },
  "5246-ZdnCWL4k5G": {
    "description": "If the client does not send the signature_algorithms extension, the server MUST do the following:[...]If the negotiated key exchange algorithm is one of (DHE_DSS, DH_DSS), behave as if the client had sent the value {sha1,dsa}.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4.1. Signature Algorithms"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "SignatureAlgorithms",
      "dssNoSignatureAlgorithmsExtension"
    ]
  },
  "5246-MjFVuYUzfF": {
    "description": "If the client does not send the signature_algorithms extension, the server MUST do the following:[...]If the negotiated key exchange algorithm is one of (DHE_DSS, DH_DSS), behave as if the client had sent the value {sha1,dsa}.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4.1. Signature Algorithms"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "SignatureAlgorithms",
      "ecdsaNoSignatureAlgorithmsExtension"
    ]
  },
  "5246-gnRCzTtN6q": {
    "description": "Each SignatureAndHashAlgorithm value lists a single hash/signature pair that the client is willing to verify.  The values are indicated in descending order of preference. [...]Because not all signature algorithms and hash algorithms may be accepted by an implementation (e.g., DSA with SHA-1, but not SHA-256), algorithms here are listed in pairs.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4.1. Signature Algorithms"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "SignatureAlgorithms",
      "includeUnknownSignatureAndHashAlgorithm"
    ]
  },
  "5246-52fQFPB85j": {
    "description": "Send a ClientHello that offers many SignatureAndHash algorithms",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 5246,
      "section": "7.4.1.4.1. Signature Algorithms"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "SignatureAlgorithms",
      "offerManyAlgorithms"
    ]
  },
  "5246-E35jpNkWHS": {
    "description": "Implementations MUST NOT send record types not defined in this document unless negotiated by some extension. If a TLS implementation receives an unexpected record type, it MUST send an unexpected_message alert.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6. The TLS Record Protocol"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "TLSRecordProtocol",
      "sendNotDefinedRecordTypesWithClientHello"
    ]
  },
  "5246-J3JUrjX6Xa": {
    "description": "Implementations MUST NOT send record types not defined in this document unless negotiated by some extension. If a TLS implementation receives an unexpected record type, it MUST send an unexpected_message alert.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 40,
      "Alert": 60
    },
    "rfc": {
      "number": 5246,
      "section": "6. The TLS Record Protocol"
    },
    "tags": [
      "server",
      "tls12",
      "rfc5246",
      "TLSRecordProtocol",
      "sendNotDefinedRecordTypesWithCCSAndFinished"
    ]
  },
  "6066-JyjogiVdHS": {
    "description": "Note in addition that a server MUST NOT send the \"CertificateStatus\" message unless it received a \"status_request\" extension in the client hello message and sent a \"status_request\" extension in the server hello message.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 6066,
      "section": "8. Certificate Status Request"
    },
    "tags": [
      "server",
      "tls12",
      "rfc6066",
      "CertificateStatusRequest",
      "doesNotSendUnrequestedCertificateStatus"
    ]
  },
  "6066-39keM8ZKdL": {
    "description": "If a server receives a maximum fragment length negotiation request for a value other than the allowed values, it MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 6066,
      "section": "4. Maximum Fragment Length Negotiation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc6066",
      "MaximumFragmentLength",
      "invalidMaximumFragmentLength"
    ]
  },
  "6066-UYvTvBM1mm": {
    "description": "Once a maximum fragment length other than 2^14 has been successfully negotiated, the client and server MUST immediately begin fragmenting messages (including handshake messages) to ensure that no fragment larger than the negotiated length is sent.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60
    },
    "rfc": {
      "number": 6066,
      "section": "4. Maximum Fragment Length Negotiation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc6066",
      "MaximumFragmentLength",
      "respectsNegotiatedMaxFragmentLength"
    ]
  },
  "6066-R1bTAhZhmS": {
    "description": "The ServerNameList MUST NOT contain more than one name of the same name_type.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 6066,
      "section": "3. Server Name Indication"
    },
    "tags": [
      "server",
      "tls12",
      "rfc6066",
      "ServerNameIndication",
      "moreThanOneNameOfTheSameType"
    ]
  },
  "6176-KmcHZWR21g": {
    "description": "TLS clients MUST NOT send the SSL version 2.0 compatible CLIENT- HELLO message format.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 6176,
      "section": "3"
    },
    "tags": [
      "server",
      "tls12",
      "rfc6176",
      "ProhibitingSSLv2",
      "sendSSL2CompatibleClientHello"
    ]
  },
  "6176-UvTTXNibXJ": {
    "description": "TLS servers MUST NOT reply with an SSL 2.0 SERVER-HELLO with a protocol version that is less than { 0x03, 0x00 } and instead MUST abort the connection",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 6176,
      "section": "3"
    },
    "tags": [
      "server",
      "tls12",
      "rfc6176",
      "ProhibitingSSLv2",
      "sendClientHelloVersionLower0300"
    ]
  },
  "7366-rFjsKGrqCe": {
    "description": "The use of encrypt-then-MAC is negotiated via TLS/DTLS extensions as defined in TLS [2].  On connecting, the client includes the encrypt_then_mac extension in its client_hello if it wishes to use encrypt-then-MAC rather than the default MAC-then-encrypt.  If the server is capable of meeting this requirement, it responds with an encrypt_then_mac in its server_hello.",
    "severityLevels": {
      "Crypto": 20,
      "Security": 40,
      "Handshake": 20,
      "RecordLayer": 40,
      "Interoperability": 20
    },
    "rfc": {
      "number": 7366,
      "section": "2.  Negotiating Encrypt-then-MAC"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7366",
      "EncThenMacExtension",
      "negotiatesEncThenMacExt"
    ]
  },
  "7366-HSEGiXELMF": {
    "description": "If a server receives an encrypt-then-MAC request extension from a client and then selects a stream or Authenticated Encryption with Associated Data (AEAD) ciphersuite, it MUST NOT send an encrypt-then-MAC response extension back to the client.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 80
    },
    "rfc": {
      "number": 7366,
      "section": "3.  Applying Encrypt-then-MAC"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7366",
      "EncThenMacExtension",
      "negotiatesEncThenMacExtOnlyWithBlockCiphers"
    ]
  },
  "7465-Wgqu8SjgSW": {
    "description": "TLS servers MUST NOT select an RC4 cipher suite when a TLS client sends such a cipher suite in the ClientHello message.",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 100,
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7465,
      "section": "2"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7465",
      "RC4Ciphersuites",
      "offerRC4AndOtherCiphers"
    ]
  },
  "7465-YNsMZJY6pa": {
    "description": "If the TLS client only offers RC4 cipher suites, the TLS server MUST terminate the handshake. The TLS server MAY send the insufficient_security fatal alert in this case.",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 100,
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 7465,
      "section": "2"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7465",
      "RC4Ciphersuites",
      "onlyRC4Suites"
    ]
  },
  "7507-vRFeTtQWZU": {
    "description": "If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version supported by the server is higher than the version indicated in ClientHello.client_version, the server MUST respond with a fatal inappropriate_fallback alert (unless it responds with a fatal protocol_version alert because the version indicated in ClientHello.client_version is unsupported). The record layer version number for this alert MUST be set to either ClientHello.client_version (as it would for the Server Hello message if the server was continuing the handshake) or to the record layer version number used by the client.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 7507,
      "section": "3. Server Behavior"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7507",
      "SCSV",
      "includeFallbackSCSV"
    ]
  },
  "7507-tdAiQecjfD": {
    "description": "If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version supported by the server is higher than the version indicated in ClientHello.client_version, the server MUST respond with a fatal inappropriate_fallback alert (unless it responds with a fatal protocol_version alert because the version indicated in ClientHello.client_version is unsupported). The record layer version number for this alert MUST be set to either ClientHello.client_version (as it would for the Server Hello message if the server was continuing the handshake) or to the record layer version number used by the client.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 7507,
      "section": "3. Server Behavior"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7507",
      "SCSV",
      "includeFallbackSCSV_nonRecommendedCipherSuiteOrder"
    ]
  },
  "7568-SxJGaYDNfG": {
    "description": "SSLv3 MUST NOT be used. Negotiation of SSLv3 from any version of TLS MUST NOT be permitted. [...]Pragmatically, clients MUST NOT send a ClientHello with ClientHello.client_version set to {03,00}. Similarly, servers MUST NOT send a ServerHello with ServerHello.server_version set to {03,00}. Any party receiving a Hello message with the protocol version set to {03,00} MUST respond with a \"protocol_version\" alert message and close the connection.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 7568,
      "section": "3. Do Not Use SSL Version 3.0"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7568",
      "DoNotUseSSLVersion30",
      "sendClientHelloVersion0300"
    ]
  },
  "7568-4aw1KUVQi9": {
    "description": "TLS servers MUST accept any value {03,XX} (including {03,00}) as the record layer version number for ClientHello, but they MUST NOT negotiate SSLv3.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 80
    },
    "rfc": {
      "number": 7568,
      "section": "3. Do Not Use SSL Version 3.0"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7568",
      "DoNotUseSSLVersion30",
      "sendClientHelloVersion0300DifferentRecordVersion"
    ]
  },
  "7568-6CdJpT15w2": {
    "description": "TLS servers MUST accept any value {03,XX} (including {03,00}) as the record layer version number for ClientHello, but they MUST NOT negotiate SSLv3.",
    "severityLevels": {
      "DeprecatedFeature": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 80
    },
    "rfc": {
      "number": 7568,
      "section": "3. Do Not Use SSL Version 3.0"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7568",
      "DoNotUseSSLVersion30",
      "sendClientHelloVersion0300RecordVersion"
    ]
  },
  "7685-gMPk6BA96F": {
    "description": "The client MUST fill the padding extension completely with zero bytes, although the padding extension_data field may be empty.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 40,
      "Alert": 40
    },
    "rfc": {
      "number": 7685,
      "section": "3"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7685",
      "PaddingExtension",
      "paddingWithNonZero"
    ]
  },
  "7685-mCUrK3JRDo": {
    "description": "The server MUST NOT echo the extension.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 40
    },
    "rfc": {
      "number": 7685,
      "section": "3"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7685",
      "PaddingExtension",
      "serverDoesNotEcho"
    ]
  },
  "7919-1GQ8w3rdqd": {
    "description": "[...] the server MUST verify that 1 < dh_Yc < dh_p - 1. If dh_Yc is out of range, the server MUST terminate the connection with a fatal handshake_failure(40) alert. [...]Peers MUST validate each other's public key Y (dh_Ys offered by the server or dh_Yc offered by the client) by ensuring that 1 < Y < p-1.",
    "severityLevels": {
      "Handshake": 20,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 7919,
      "section": "4. Server Behavior and 5.1. Checking the Peer's Public Key"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "shareOutOfBounds"
    ]
  },
  "7919-pPnKVL1dfj": {
    "description": "If a compatible TLS server receives a Supported Groups extension from a client that includes any FFDHE group (i.e., any codepoint between 256 and 511, inclusive, even if unknown to the server), and if none of the client-proposed FFDHE groups are known and acceptable to the server, then the server MUST NOT select an FFDHE cipher suite.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7919,
      "section": "4. Server Behavior"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "negotiatesNonFfdheIfNecessary"
    ]
  },
  "7919-5qMeS9hJ7K": {
    "description": "If a compatible TLS server receives a Supported Groups extension from a client that includes any FFDHE group (i.e., any codepoint between 256 and 511, inclusive, even if unknown to the server), and if none of the client-proposed FFDHE groups are known and acceptable to the server, then the server MUST NOT select an FFDHE cipher suite.[...]If the extension is present with FFDHE groups, none of the client's offered groups are acceptable by the server, and none of the client's proposed non-FFDHE cipher suites are acceptable to the server, the server MUST end the connection with a fatal TLS alert of type insufficient_security(71).",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7919,
      "section": "4. Server Behavior"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "abortsWhenGroupsDontOverlap"
    ]
  },
  "7919-poUc9K3yfd": {
    "description": "A compatible TLS server that receives the Supported Groups extension with FFDHE codepoints in it and that selects an FFDHE cipher suite MUST select one of the client's offered groups. [...]A TLS server MUST NOT select a named FFDHE group that was not offered by a compatible client.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7919,
      "section": "4. Server Behavior"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "respectsOfferedGroups"
    ]
  },
  "7919-stXkxYBEVU": {
    "description": "A TLS server MUST NOT select an FFDHE cipher suite if the client did not offer one, even if the client offered an FFDHE group in the Supported Groups extension.",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 7919,
      "section": "4. Server Behavior"
    },
    "tags": [
      "server",
      "tls12",
      "rfc7919",
      "FfDheShare",
      "doesNotNegotiateDheCipherSuiteWhenNotOffered"
    ]
  },
  "8422-cxTqTQ7WwQ": {
    "description": "The Supported Point Formats Extension, when used, MUST contain the value 0 (uncompressed) as one of the items in the list of point formats. [...]Implementations of this document MUST support the uncompressed format for all of their supported curves and MUST NOT support other formats for curves defined in this specification.  For backwards compatibility purposes, the point format list extension MAY still be included and contain exactly one value: the uncompressed point format (0).",
    "severityLevels": {
      "DeprecatedFeature": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "5.2. Server Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "PointFormatExtension",
      "serverAdvertisesOnlyUncompressedPointFormat"
    ]
  },
  "8422-hCNJHtPUAY": {
    "description": "If the client sends the extension and the extension does not contain the uncompressed point format, and the client has used the Supported Groups extension to indicate support for any of the curves defined in this specification, then the server MUST abort the handshake and return an illegal_parameter alert.",
    "severityLevels": {
      "DeprecatedFeature": 60,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8422,
      "section": "5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "PointFormatExtension",
      "invalidPointFormat"
    ]
  },
  "8422-DRMPmFHPDy": {
    "description": "If the client sends the extension and the extension does not contain the uncompressed point format, and the client has used the Supported Groups extension to indicate support for any of the curves defined in this specification, then the server MUST abort the handshake and return an illegal_parameter alert.",
    "severityLevels": {
      "DeprecatedFeature": 60,
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8422,
      "section": "5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "PointFormatExtension",
      "deprecatedFormat"
    ]
  },
  "8422-zuAGxqyDEg": {
    "description": "A server that receives a ClientHello containing one or both of these extensions MUST use the client's enumerated capabilities to guide its selection of an appropriate cipher suite.  One of the proposed ECC cipher suites must be negotiated only if the server can successfully complete the handshake while using the curves and point formats supported by the client (cf. Sections 5.3 and 5.4).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "RespectClientExtensions",
      "respectChosenCurve"
    ]
  },
  "8422-bc43G6qpcS": {
    "description": "A server that receives a ClientHello containing one or both of these extensions MUST use the client's enumerated capabilities to guide its selection of an appropriate cipher suite.  One of the proposed ECC cipher suites must be negotiated only if the server can successfully complete the handshake while using the curves and point formats supported by the client (cf. Sections 5.3 and 5.4).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "RespectClientExtensions",
      "respectChosenCurveWithoutFormats"
    ]
  },
  "8422-xyn7SDVFRX": {
    "description": "If the client has used a Supported Elliptic Curves Extension, the public key in the server\u00e2\u20ac\u2122s certificate MUST respect the client\u00e2\u20ac\u2122s choice of elliptic curves. A server that cannot satisfy this requirement MUST NOT choose an ECC cipher suite in its ServerHello message.)",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "5.3.  Server Certificate"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "RespectClientExtensions",
      "respectsChosenCurveForCertificates"
    ]
  },
  "8422-rxF7z2tc5t": {
    "description": "A server that receives a ClientHello containing one or both of these extensions MUST use the client's enumerated capabilities to guide its selection of an appropriate cipher suite.  One of the proposed ECC cipher suites must be negotiated only if the server can successfully complete the handshake while using the curves and point formats supported by the client (cf. Sections 5.3 and 5.4).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "addUnknownEllipticCurve"
    ]
  },
  "8422-Dk77D7HNBW": {
    "description": "If a server does not understand the Supported Elliptic Curves Extension, does not understand the Supported Point Formats Extension, or is unable to complete the ECC handshake while restricting itself to the enumerated curves and point formats, it MUST NOT negotiate the use of an ECC cipher suite.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "onlyInvalidEllipticCurve"
    ]
  },
  "8422-4G8mbkQ9LM": {
    "description": "Servers implementing ECC cipher suites MUST support these extensions, and when a client uses these extensions, servers MUST NOT negotiate the use of an ECC cipher suite unless they can complete the handshake while respecting the choice of curves specified by the client. [...]If a server does not understand the Supported Elliptic Curves Extension, does not understand the Supported Point Formats Extension, or is unable to complete the ECC handshake while restricting itself to the enumerated curves and point formats, it MUST NOT negotiate the use of an ECC cipher suite.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8422,
      "section": "4. TLS Extensions for ECC and 5.1. Client Hello Extensions"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "invalidEllipticCurve_WithNonECCCiphersuite"
    ]
  },
  "8422-ErkUw4SDEy": {
    "description": "Deprecated groups should not be supported",
    "severityLevels": {
      "Crypto": 60,
      "DeprecatedFeature": 60,
      "Security": 40,
      "Handshake": 60
    },
    "rfc": {
      "number": 8422,
      "section": "5.1.1 Supported Elliptic Curves Extension"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "supportsDeprecated"
    ]
  },
  "8422-PtimgKWxss": {
    "description": "NamedCurve named_curve_list<2..2^16-1>",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "5.1.1.  Supported Elliptic Curves Extension"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "manyGroupsOffered"
    ]
  },
  "8422-4MTo5xU82i": {
    "description": "With the NIST curves, each party MUST validate the public key sent by its peer in the ClientKeyExchange and ServerKeyExchange messages.  A receiving party MUST check that the x and y parameters from the peer's public value satisfy the curve equation, y^2 = x^3 + ax + b mod p.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 80,
      "Handshake": 60,
      "Alert": 40
    },
    "rfc": {
      "number": 8422,
      "section": "5.11. Public Key Validation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "rejectsInvalidCurvePoints"
    ]
  },
  "8422-fV4R6XHPeJ": {
    "description": "if either party obtains all-zeroes x_S, it MUST abort the handshake (as required by definition of X25519 and X448). [...]With X25519 and X448, a receiving party MUST check whether the computed premaster secret is the all-zero value and abort the handshake if so",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8422,
      "section": "5.10. ECDH, ECDSA, and RSA Computations and 5.11. Public Key Validation"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "abortsWhenSharedSecretIsZero"
    ]
  },
  "8422-ymcrNp3RQw": {
    "description": "The server MUST send an ephemeral ECDH public key and a specification of the corresponding curve in the ServerKeyExchange message.  These parameters MUST NOT be signed.",
    "severityLevels": {
      "Handshake": 40,
      "Interoperability": 40
    },
    "rfc": {
      "number": 8422,
      "section": "2.3.  ECDH_anon"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8422",
      "TLSExtensionForECC",
      "leavesPublicKeyUnsignedInAnon"
    ]
  },
  "8701-E4jT9RDD5y": {
    "description": "A client MAY select one or more GREASE cipher suite values and advertise them in the \"cipher_suites\" field. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseCiphersuites"
    ]
  },
  "8701-7DCDj6NnBm": {
    "description": "A client MAY select one or more GREASE extension values and advertise them as extensions with varying length and contents. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseExtensions"
    ]
  },
  "8701-BAMcGFuNFr": {
    "description": "A client MAY select one or more GREASE named group values and advertise them in the \"supported_groups\" extension, if sent.  It MAY also send KeyShareEntry values for a subset of those selected in the \"key_share\" extension.  For each of these, the \"key_exchange\" field MAY be any value. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseNamedGroup"
    ]
  },
  "8701-ngetVmJySH": {
    "description": "A client MAY select one or more GREASE signature algorithm values and advertise them in the \"signature_algorithms\" or \"signature_algorithms_cert\" extensions, if sent. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseSignatureAlgorithms"
    ]
  },
  "8701-SCkMwRniGX": {
    "description": "A client MAY select one or more GREASE ALPN identifiers and advertise them in the \"application_layer_protocol_negotiation\" extension, if sent. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls12",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseALPNIdentifiers"
    ]
  },
  "XSM-N5VTen5U6e": {
    "description": "Send a Heartbeat Request after sending the Client Hello Message and observe the response",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendHeartbeatRequestAfterClientHello"
    ]
  },
  "XSM-hUmvB1guzB": {
    "description": "Send a Heartbeat Request after sending the Client Key Exchange Message and observer the response",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendHeartbeatRequestAfterClientKeyExchange"
    ]
  },
  "XSM-RGwxgMCeT9": {
    "description": "Send a Heartbeat Request after sending the Change Cipher Spec Message and observer the response",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendHeartbeatRequestAfterChangeCipherSpec"
    ]
  },
  "XSM-JoVdmVr5by": {
    "description": "Send a Client Hello Message after sending a Client Key Exchange Message",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientHelloAfterClientKeyExchange"
    ]
  },
  "XSM-uscvmqxrG3": {
    "description": "Send a Finished Message after the ServerHello",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "sendFinishedAfterServerHello"
    ]
  },
  "XSM-hV8iCuJCXT": {
    "description": "Begin the Handshake with a Finished Message",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "beginWithFinished"
    ]
  },
  "XSM-zmpmr7nVki": {
    "description": "Send two Client Key Exchange Messages",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientKeyExchange"
    ]
  },
  "XSM-7HDSP4DS95": {
    "description": "Send two Client Key Exchange Messages with different Send Actions",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientKeyExchangeDifferentAction"
    ]
  },
  "XSM-RPJWoZQFc5": {
    "description": "Send a second Client Key Exchange Message after sending Change Cipher Spec",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientKeyExchangeAfterChangeCipherSpec"
    ]
  },
  "XSM-9TgGnWGw1S": {
    "description": "Send a second unencrypted Client Key Exchange Message after sending Change Cipher Spec",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientKeyExchangeAfterChangeCipherSpecUnencrypted"
    ]
  },
  "XSM-1yXVP5Gbsr": {
    "description": "Begin the Handshake with Change Cipher Spec. A stateless server may ignore this record from TLS 1.3 on.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "beginWithChangeCipherSpec"
    ]
  },
  "XSM-Lz5fCfdmQi": {
    "description": "Begin the Handshake with empty Application Data",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "beginWithEmptyApplicationData"
    ]
  },
  "XSM-tVGt2rqQy1": {
    "description": "Begin the Handshake with Application Data",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "beginWithApplicationData"
    ]
  },
  "XSM-jQ4aV9UCUM": {
    "description": "Send a second Change Cipher Spec after receiving the servers Finished Message",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondChangeCipherSpecAfterHandshake"
    ]
  },
  "XSM-WzfTB6GdUF": {
    "description": "Send a second Change Cipher Spec after receiving the servers Finished Message",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondChangeCipherSpecAfterHandshakeUnencrypted"
    ]
  },
  "XSM-mnyxwyTTK2": {
    "description": "Send a second Client Hello after receiving the first batch of server messages",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientHelloAfterServerHello"
    ]
  },
  "XSM-xDPE4XDweY": {
    "description": "Send two Client Hello Messages at the beginning of the Handshake",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "secondClientHello"
    ]
  },
  "XSM-dV8FPhVnww": {
    "description": "Send a Change Cipher Spec before the Client Key Exchange Message",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls12",
      "statemachine",
      "StateMachine",
      "earlyChangeCipherSpec"
    ]
  },
  "8446-d9fcJKjSny": {
    "description": "The server's certificate_list MUST always be non-empty.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.2.  Certificate"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "Certificate",
      "certificateListIsNotEmpty"
    ]
  },
  "8446-qfG8mSV78A": {
    "description": "Test if the Server sends Certificate Verify Messages with valid signatures",
    "severityLevels": {
      "Crypto": 100,
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.4.3.  Certificate Verify"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "CertificateVerify",
      "signatureIsValid"
    ]
  },
  "8446-Ruhj2eLN2t": {
    "description": "If the list contains cipher suites that the server does not recognize, support, or wish to use, the server MUST ignore those cipher suites and process the remaining ones as usual. [...]A server receiving a ClientHello MUST correctly ignore all unrecognized cipher suites, extensions, and other parameters. Otherwise, it may fail to interoperate with newer clients.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "includeUnknownCipherSuite"
    ]
  },
  "8446-B41SD1Cnr6": {
    "description": "In TLS 1.3, the client indicates its version preferences in the \"supported_versions\" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "invalidLegacyVersion_higher"
    ]
  },
  "8446-fsDXt1hint": {
    "description": "In TLS 1.3, the client indicates its version preferences in the \"supported_versions\" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "invalidLegacyVersion_lower"
    ]
  },
  "8446-hsFoi24Gdh": {
    "description": "Implementations MUST NOT send a ClientHello.legacy_version or ServerHello.legacy_version set to 0x0300 or less. Any endpoint receiving a Hello message with ClientHello.legacy_version or ServerHello.legacy_version set to 0x0300 MUST abort the handshake with a \"protocol_version\" alert.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "invalidLegacyVersion_ssl30"
    ]
  },
  "8446-qgJEM4UoBe": {
    "description": "For every TLS 1.3 ClientHello, this vector MUST contain exactly one byte, set to zero, which corresponds to the \"null\" compression method in prior versions of TLS. If a TLS 1.3 ClientHello is received with any other value in this field, the server MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "invalidCompression"
    ]
  },
  "8446-vtJcLUKtNv": {
    "description": "Servers MUST ignore unrecognized extensions. [...]A server receiving a ClientHello MUST correctly ignore all unrecognized cipher suites, extensions, and other parameters. Otherwise, it may fail to interoperate with newer clients.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "includeUnknownExtension"
    ]
  },
  "8446-GZpjQTKUD4": {
    "description": "A client is considered to be attempting to negotiate using this specification if the ClientHello contains a \"supported_versions\" extension with 0x0304 contained in its body.  Such a ClientHello message MUST meet the following requirements: [...]If not containing a \"pre_shared_key\" extension, it MUST contain both a \"signature_algorithms\" extension and a \"supported_groups\" extension. [...]If containing a \"supported_groups\" extension, it MUST also contain a \"key_share\" extension, and vice versa.[...]Servers receiving a ClientHello which does not conform to these requirements MUST abort the handshake with a \"missing_extension\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "omitKeyShareAndSupportedGroups"
    ]
  },
  "8446-jEEunwNUJ3": {
    "description": "A client is considered to be attempting to negotiate using this specification if the ClientHello contains a \"supported_versions\" extension with 0x0304 contained in its body.  Such a ClientHello message MUST meet the following requirements: [...]If not containing a \"pre_shared_key\" extension, it MUST contain both a \"signature_algorithms\" extension and a \"supported_groups\" extension. [...]If containing a \"supported_groups\" extension, it MUST also contain a \"key_share\" extension, and vice versa.[...]Servers receiving a ClientHello which does not conform to these requirements MUST abort the handshake with a \"missing_extension\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "omitKeyShare"
    ]
  },
  "8446-KQn4u3Xj4M": {
    "description": "A client is considered to be attempting to negotiate using this specification if the ClientHello contains a \"supported_versions\" extension with 0x0304 contained in its body.  Such a ClientHello message MUST meet the following requirements: [...]If not containing a \"pre_shared_key\" extension, it MUST contain both a \"signature_algorithms\" extension and a \"supported_groups\" extension. [...]If containing a \"supported_groups\" extension, it MUST also contain a \"key_share\" extension, and vice versa.[...]Servers receiving a ClientHello which does not conform to these requirements MUST abort the handshake with a \"missing_extension\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "omitSupportedGroups"
    ]
  },
  "8446-Uqrk3dnMz7": {
    "description": "Note that TLS 1.3 servers might receive TLS 1.2 or prior ClientHellos which contain other compression methods and (if negotiating such a prior version) MUST follow the procedures for the appropriate prior version of TLS.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ClientHello",
      "acceptsCompressionListForLegacyClient"
    ]
  },
  "8446-i1e2R9UFD2": {
    "description": "Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.2 Cookie"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "Cookie",
      "clientHelloWithUnsolicitedCookieExtension"
    ]
  },
  "8446-5fMfqyHu68": {
    "description": "If no common cryptographic parameters can be negotiated, the server MUST abort the handshake with an appropriate alert.[...] If there is no overlap between the received \"supported_groups\" and the groups supported by the server, then the server MUST abort the handshake with a \"handshake_failure\" or an \"insufficient_security\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.1 Cryptographic Negotiation"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "CryptographicNegotiation",
      "noOverlappingParameters"
    ]
  },
  "8446-QxURSJAYJj": {
    "description": "If the server is unable to negotiate a supported set of parameters (i.e., there is no overlap between the client and server parameters), it MUST abort the handshake with either a \"handshake_failure\" or \"insufficient_security\" fatal alert (see Section 6).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.1 Cryptographic Negotiation"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "CryptographicNegotiation",
      "noOverlappingParametersCipherSuite"
    ]
  },
  "8446-3tUPL8K9nh": {
    "description": "If the server supplies an \"early_data\" extension, the client MUST verify that the server's selected_identity is 0.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.10 Early Data Indication"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "EarlyData",
      "selectedFirstIdentity"
    ]
  },
  "8446-QX4UnMXsbP": {
    "description": "[The server] MUST verify that the following values are the same as those associated with the selected PSK: [...] The selected cipher suite [...]If any of these checks fail, the server MUST NOT respond with the extension",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.10 Early Data Indication"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "EarlyData",
      "cipherSuiteDisparity"
    ]
  },
  "8446-wiNRa3novJ": {
    "description": "[The server] MUST verify that the following values are the same as those associated with the selected PSK: [...] The TLS version number [...]If any of these checks fail, the server MUST NOT respond with the extension",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.10 Early Data Indication"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "EarlyData",
      "tlsVersionDisparity"
    ]
  },
  "8446-LSEXdVf1sN": {
    "description": "If the server chooses to accept the \"early_data\" extension, then it MUST comply with the same error-handling requirements specified for all records when processing early data records.  Specifically, if the server fails to decrypt a 0-RTT record following an accepted \"early_data\" extension, it MUST terminate the connection with a \"bad_record_mac\" alert as per Section 5.2.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.10 Early Data Indication"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "EarlyData",
      "invalidCiphertext"
    ]
  },
  "8446-QSom3GGTZ1": {
    "description": "If the server chooses to accept the \"early_data\" extension, then it MUST comply with the same error-handling requirements specified for all records when processing early data records.  Specifically, if the server fails to decrypt a 0-RTT record following an accepted \"early_data\" extension, it MUST terminate the connection with a \"bad_record_mac\" alert as per Section 5.2.",
    "severityLevels": {
      "Crypto": 80,
      "Security": 100,
      "RecordLayer": 100,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.10 Early Data Indication"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "EarlyData",
      "invalidAuthTag"
    ]
  },
  "8446-ZkFrZYKzbi": {
    "description": "The client MUST check EncryptedExtensions for the presence of any forbidden extensions and if any are found MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.3.1  Encrypted Extensions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "EncryptedExtensions",
      "includedInvalidExtensions"
    ]
  },
  "8446-7STiGzfK9u": {
    "description": "The server will send this message in response to a ClientHello message if it is able to find an acceptable set of parameters but the ClientHello does not contain sufficient information to proceed with the handshake. [...]The server's extensions MUST contain \"supported_versions\". [...]\"supported_versions\" is REQUIRED for all ClientHello, ServerHello, and HelloRetryRequest messages.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "helloRetryRequestValid"
    ]
  },
  "8446-aVxixR6JLE": {
    "description": "Servers MUST ensure that they negotiate the same cipher suite when receiving a conformant updated ClientHello",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "selectsSameCipherSuiteAllAtOnce"
    ]
  },
  "8446-PqtPy7dAY2": {
    "description": "Servers MUST ensure that they negotiate the same cipher suite when receiving a conformant updated ClientHello",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "selectsSameCipherSuite"
    ]
  },
  "8446-i5qA9bNwto": {
    "description": "The value of selected_version in the HelloRetryRequest \"supported_versions\" extension MUST be retained in the ServerHello",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "retainsProtocolVersion"
    ]
  },
  "8446-FwJUHPJFYr": {
    "description": "If the server selects an (EC)DHE group and the client did not offer a compatible \"key_share\" extension in the initial ClientHello, the server MUST respond with a HelloRetryRequest (Section 4.1.4) message. [...] Clients MAY send an empty client_shares vector in order to request group selection from the server, at the cost of an additional round trip",
    "severityLevels": {
      "Interoperability": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.4 Hello Retry Request"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "HelloRetryRequest",
      "sentHelloRetryRequest"
    ]
  },
  "8446-9hMnjrCbMV": {
    "description": "Each KeyShareEntry value MUST correspond to a group offered in the \"supported_groups\" extension and MUST appear in the same order.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "testOrderOfKeyshareEntries"
    ]
  },
  "8446-R2rb1WZoQo": {
    "description": "If (EC)DHE key establishment is in use, then the ServerHello contains a \"key_share\" extension with the server's ephemeral Diffie-Hellman share; the server's share MUST be in the same group as one of the client's shares. [...]If using (EC)DHE key establishment, servers offer exactly one KeyShareEntry in the ServerHello. This value MUST be in the same group as the KeyShareEntry value offered by the client that the server has selected for the negotiated key exchange.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "serverOnlyOffersOneKeyshare"
    ]
  },
  "8446-TKn1mNn5mY": {
    "description": "If using (EC)DHE key establishment, servers offer exactly one KeyShareEntry in the ServerHello. This value MUST be in the same group as the KeyShareEntry value offered by the client that the server has selected for the negotiated key exchange. [...]Servers MUST NOT send a KeyShareEntry for any group not indicated in the client's \"supported_groups\" extension",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "serverOnlyOffersOneKeyshareAllGroupsAtOnce"
    ]
  },
  "8446-KdkvUJX3HK": {
    "description": "secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019), x25519(0x001D), x448(0x001E),",
    "severityLevels": {
      "Crypto": 80,
      "DeprecatedFeature": 80,
      "Security": 40,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "serverAcceptsDeprecatedGroups"
    ]
  },
  "8446-1vps8J91dU": {
    "description": "secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019), x25519(0x001D), x448(0x001E),",
    "severityLevels": {
      "Crypto": 80,
      "DeprecatedFeature": 80,
      "Security": 40,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "serverAcceptsDeprecatedGroupsAllAtOnce"
    ]
  },
  "8446-tCzswEB5Ua": {
    "description": "A server receiving a ClientHello MUST correctly ignore all unrecognized cipher suites, extensions, and other parameters. Otherwise, it may fail to interoperate with newer clients.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "includeUnknownGroup"
    ]
  },
  "8446-Pew9n1pYvc": {
    "description": "For the curves secp256r1, secp384r1, and secp521r1, peers MUST validate each other's public value Q by ensuring that the point is a valid point on the elliptic curve.",
    "severityLevels": {
      "Security": 100,
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "rejectsPointsNotOnCurve"
    ]
  },
  "8446-5Vqv9qrKQQ": {
    "description": "Peers MUST validate each other's public key Y by ensuring that 1 < Y < p-1.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "ffdheShareOutOfBounds"
    ]
  },
  "8446-sa4RjSVVNr": {
    "description": "For X25519 and X448, [...]For these curves, implementations SHOULD use the approach specified in [RFC7748] to calculate the Diffie-Hellman shared secret. Implementations MUST check whether the computed Diffie-Hellman shared secret is the all-zero value and abort if so",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.8. Key Share"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "KeyShare",
      "abortsWhenSharedSecretIsZero"
    ]
  },
  "8446-bgegNHeUgg": {
    "description": "Either side can send change_cipher_spec at any time during the handshake, as they must be ignored by the peer, but if the client sends a non-empty session ID, the server MUST send the change_cipher_spec as described in this appendix.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "D.4.  Middlebox Compatibility Mode"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "MiddleboxCompatibility",
      "respectsClientCompatibilityWish"
    ]
  },
  "8446-vUL6yuqsbj": {
    "description": "Either side can send change_cipher_spec at any time during the handshake, as they must be ignored by the peer, but if the client sends a non-empty session ID, the server MUST send the change_cipher_spec as described in this appendix.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "D.4.  Middlebox Compatibility Mode"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "MiddleboxCompatibility",
      "respectsClientCompatibilityWishWithHrr"
    ]
  },
  "8446-Av3GbEztrR": {
    "description": "Indicates the lifetime in seconds as a 32-bit unsigned integer in network byte order from the time of ticket issuance. Servers MUST NOT use any value greater than 604800 seconds (7 days). [...]A securely generated, random 32-bit value that is used to obscure the age of the ticket that the client includes in the \"pre_shared_key\" extension.  The client-side ticket age is added to this value modulo 2^32 to obtain the value that is transmitted by the client.  The server MUST generate a fresh value for each ticket it sends.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.6.1.  New Session Ticket Message"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "NewSessionTicket",
      "newSessionTicketsAreValid"
    ]
  },
  "8446-8RhYHEGBvv": {
    "description": "The \"pre_shared_key\" extension MUST be the last extension in the ClientHello (this facilitates implementation as described below). Servers MUST check that it is the last extension and otherwise fail the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "isNotLastExtension"
    ]
  },
  "8446-K5PYwUqs8E": {
    "description": "The \"pre_shared_key\" extension MUST be the last extension in the ClientHello (this facilitates implementation as described below). Servers MUST check that it is the last extension and otherwise fail the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "isLastButDuplicatedExtension"
    ]
  },
  "8446-Hq5yKcFcmQ": {
    "description": "If the server selects a PSK, then it MUST also select a key establishment mode from the set indicated by the client's \"psk_key_exchange_modes\" extension (at present, PSK alone or with (EC)DHE). [...][Servers] MUST NOT send a KeyShareEntry when using the \"psk_ke\" PskKeyExchangeMode. [...]PSK-only key establishment.  In this mode, the server MUST NOT supply a \"key_share\" value.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "respectsKeyExchangeChoicePskOnly"
    ]
  },
  "8446-Eqo9cmGAET": {
    "description": "If the server selects a PSK, then it MUST also select a key establishment mode from the set indicated by the client's \"psk_key_exchange_modes\" extension (at present, PSK alone or with (EC)DHE). [...] Servers MUST NOT select a key exchange mode that is not listed by the client. [...]PSK with (EC)DHE key establishment.  In this mode, the client and server MUST supply \"key_share\" values as described in Section 4.2.8.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "respectsKeyExchangeChoicePskDhe"
    ]
  },
  "8446-AGtoN1G2B3": {
    "description": "Prior to accepting PSK key establishment, the server MUST validate the corresponding binder value (see Section 4.2.11.2 below).  If this value is not present or does not validate, the server MUST abort the handshake.",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "invalidBinder"
    ]
  },
  "8446-1SEHo5n8WM": {
    "description": "Prior to accepting PSK key establishment, the server MUST validate the corresponding binder value",
    "severityLevels": {
      "Crypto": 100,
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "noBinder"
    ]
  },
  "8446-2eQTsmq7d1": {
    "description": "Clients MUST verify that the server\u00e2\u20ac\u2122s selected_identity is within the range supplied by the client",
    "severityLevels": {
      "Security": 80,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "selectedPSKIndexIsWithinOfferedListSize"
    ]
  },
  "8446-Yo68xBhELu": {
    "description": "Any ticket MUST only be resumed with a cipher suite that has the same KDF hash algorithm as that used to establish the original connection.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "resumeWithCipherWithDifferentHkdfHash"
    ]
  },
  "8446-mwDQtBNg4o": {
    "description": "If clients offer \"pre_shared_key\" without a \"psk_key_exchange_modes\" extension, servers MUST abort the handshake.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.11 Pre-Shared Key Extension"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "PreSharedKey",
      "sendPskExtensionWithoutPskKeyExchangeModes"
    ]
  },
  "8446-HWUJWNwjoA": {
    "description": "Implementations MUST NOT send zero-length fragments of Handshake types, even if those fragments contain padding.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "zeroLengthRecord_CH"
    ]
  },
  "8446-orNs8sPcM8": {
    "description": "Implementations MUST NOT send Handshake and Alert records that have a zero-length TLSInnerPlaintext.content; if such a message is received, the receiving implementation MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "RecordLayer": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "zeroLengthRecord_Finished"
    ]
  },
  "8446-EHgkL2huNs": {
    "description": "Handshake messages MUST NOT be interleaved with other record types. That is, if a handshake message is split over two or more\nrecords, there MUST NOT be any other records between them.",
    "severityLevels": {
      "RecordLayer": 40,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "interleaveRecords"
    ]
  },
  "8446-UCLQ6PhSyy": {
    "description": "Note that earlier versions of TLS did not clearly specify the record layer version number value in all cases (TLSPlaintext.legacy_record_version).  Servers will receive various TLS 1.x versions in this field, but its value MUST always be ignored.",
    "severityLevels": {
      "RecordLayer": 80,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "ignoresInitialRecordVersion"
    ]
  },
  "8446-qrenZekKeD": {
    "description": "legacy_record_version:  MUST be set to 0x0303 for all records generated by a TLS 1.3 implementation other than an initial ClientHello [...]In order to maximize backward compatibility, a record containing an initial ClientHello SHOULD have version 0x0301 (reflecting TLS 1.0) and a record containing a second ClientHello or a ServerHello MUST have version 0x0303 (reflecting TLS 1.2).",
    "severityLevels": {
      "Handshake": 80,
      "RecordLayer": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "5.1. Record Layer"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "RecordLayer",
      "checkRecordProtocolVersion"
    ]
  },
  "8446-8bcX8V9Zve": {
    "description": "In TLS 1.3, the TLS server indicates its version using the \"supported_versions\" extension (Section 4.2.1), and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testLegacyVersion"
    ]
  },
  "8446-p17y8QGnbD": {
    "description": "The last 8 bytes MUST be overwritten as described below if negotiating TLS 1.2 or TLS 1.1, but the remaining bytes MUST be random. [...]TLS 1.3 servers which negotiate TLS 1.2 or below in response to a ClientHello MUST set the last 8 bytes of their Random value specially in their ServerHello. [...]If negotiating TLS 1.2, TLS 1.3 servers MUST set the last 8 bytes of their Random value to the bytes: 44 4F 57 4E 47 52 44 01",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testServerRandomFor12"
    ]
  },
  "8446-CyEBbGYnB5": {
    "description": "The last 8 bytes MUST be overwritten as described below if negotiating TLS 1.2 or TLS 1.1, but the remaining bytes MUST be random. [...]TLS 1.3 servers which negotiate TLS 1.2 or below in response to a ClientHello MUST set the last 8 bytes of their Random value specially in their ServerHello. [...]If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2 servers SHOULD, set the last 8 bytes of their ServerHello.Random value to the bytes: 44 4F 57 4E 47 52 44 00",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testServerRandomFor11"
    ]
  },
  "8446-h8ESe4vrN3": {
    "description": "The last 8 bytes MUST be overwritten as described below if negotiating TLS 1.2 or TLS 1.1, but the remaining bytes MUST be random. [...]TLS 1.3 servers which negotiate TLS 1.2 or below in response to a ClientHello MUST set the last 8 bytes of their Random value specially in their ServerHello. [...]If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2 servers SHOULD, set the last 8 bytes of their ServerHello.Random value to the bytes: 44 4F 57 4E 47 52 44 00",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testServerRandomFor10"
    ]
  },
  "8446-3FhkMFZvbt": {
    "description": "A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testSessionIdEchoed"
    ]
  },
  "8446-aDiNwQZBTY": {
    "description": "A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an \"illegal_parameter\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testShortSessionIdEchoed"
    ]
  },
  "8446-S1VjZrpD1J": {
    "description": "legacy_compression_method: A single byte which MUST have the value 0.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testCompressionValue"
    ]
  },
  "8446-sm3XxXFjbr": {
    "description": "As with the ServerHello, a HelloRetryRequest MUST NOT contain any extensions that were not first offered by the client in its ClientHello, with the exception of optionally the \"cookie\" (see Section 4.2.2) extension. [...]There MUST NOT be more than one extension of the same type in a given extension block. [...]The \"oid_filters\" extension allows servers to provide a set of OID/value pairs which it would like the client's certificate to match.  This extension, if provided by the server, MUST only be sent in the CertificateRequest message. [...]Servers MUST NOT send a post-handshake CertificateRequest to clients which do not offer this extension.  Servers MUST NOT send this extension. [...]Implementations MUST NOT use the Truncated HMAC extension",
    "severityLevels": {
      "Handshake": 80,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.3 Server Hello"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "ServerHello",
      "testProvidedExtensions"
    ]
  },
  "8446-kAJgkp7NBf": {
    "description": "If a server is authenticating via a certificate and the client has not sent a \"signature_algorithms\" extension, then the server MUST abort the handshake with a \"missing_extension\" alert (see Section 9.2).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.3 Signature Algorithms"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "omitSignatureAlgorithmsExtension"
    ]
  },
  "8446-gKTTeCxk6m": {
    "description": "These values refer solely to signatures which appear in certificates (see Section 4.4.2.2) and are not defined for use in signed TLS handshake messages, although they MAY appear in \"signature_algorithms\" and \"signature_algorithms_cert\" for backward compatibility with TLS 1.2. [...]Clients offering these values MUST list them as the lowest priority (listed after all other algorithms in SignatureSchemeList).",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.3 Signature Algorithms"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "offerLegacySignatureAlgorithms"
    ]
  },
  "8446-3WqNtgoV2Z": {
    "description": "These values refer solely to signatures which appear in certificates (see Section 4.4.2.2) and are not defined for use in signed TLS handshake messages, although they MAY appear in \"signature_algorithms\" and \"signature_algorithms_cert\" for backward compatibility with TLS 1.2. [...]In TLS 1.2, the extension contained hash/signature pairs.  The pairs are encoded in two octets, so SignatureScheme values have been allocated to align with TLS 1.2's encoding.  Some legacy pairs are left unallocated.  These algorithms are deprecated as of TLS 1.3.  They MUST NOT be offered or negotiated by any implementation.  In particular, MD5 [SLOTH], SHA-224, and DSA MUST NOT be used.",
    "severityLevels": {
      "Security": 60,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.3 Signature Algorithms"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "offerOnlyLegacySignatureAlgorithms"
    ]
  },
  "8446-5YCxveMdpt": {
    "description": "A server receiving a ClientHello MUST correctly ignore all unrecognized cipher suites, extensions, and other parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.3 Signature Algorithms"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SignatureAlgorithms",
      "includeUnknownSignatureAndHashAlgorithm"
    ]
  },
  "8446-UwCnJTWbmd": {
    "description": "The extension contains a list of supported versions in preference order, with the most preferred version first. [...]If the \"supported_versions\" extension is present, the server MUST negotiate using that extension as described in Section 4.2.1.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "testVersionPreferrence"
    ]
  },
  "8446-ZiLwhbnp3y": {
    "description": "If this extension is not present, servers which are compliant with this specification and which also support TLS 1.2 MUST negotiate TLS 1.2 or prior as specified in [RFC5246][...]If the \"supported_versions\" extension is not present, the server MUST negotiate the minimum of ClientHello.legacy_version and TLS 1.2.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "omitSupportedVersionsExtension"
    ]
  },
  "8446-zCaAr5BmNR": {
    "description": "If the \"supported_versions\" extension is absent and the server only supports versions greater than ClientHello.legacy_version, the server MUST abort the handshake with a \"protocol_version\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "supportedVersionsAbsentOnlyUnsupportedLegacyVersion"
    ]
  },
  "8446-ihyps8KzBF": {
    "description": "If this extension is present in the ClientHello, servers MUST NOT use the ClientHello.legacy_version value for version negotiation and MUST use only the \"supported_versions\" extension to determine client preferences.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "oldLegacyVersion"
    ]
  },
  "8446-LoyBdjVUeE": {
    "description": "Servers MUST only select a version of TLS present in that extension and MUST ignore any unknown versions that are present in that extension.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "unknownVersion"
    ]
  },
  "8446-vdaMcxzYj2": {
    "description": "Servers MUST be prepared to receive ClientHellos that include this extension but do not include 0x0304 in the list of versions. A server which negotiates a version of TLS prior to TLS 1.3 MUST set ServerHello.version and MUST NOT send the \"supported_versions\" extension.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "supportedVersionsWithoutTls13"
    ]
  },
  "8446-n5pojEqeaS": {
    "description": "All TLS 1.3 ServerHello messages MUST contain the \"supported_versions\" extension. [...] A server which negotiates TLS 1.3 MUST respond by sending a \"supported_versions\" extension containing the selected version value (0x0304). It MUST set the ServerHello.legacy_version field to 0x0303 (TLS 1.2).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "tls13Handshake"
    ]
  },
  "8446-2NRWKXH1nX": {
    "description": "If this extension is present in the ClientHello, servers MUST NOT use the ClientHello.legacy_version value for version negotiation and MUST use only the \"supported_versions\" extension to determine client preferences.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "setLegacyVersionTo0304"
    ]
  },
  "8446-WKMbKXKLH1": {
    "description": "If this extension is not present, servers which are compliant with this specification and which also support TLS 1.2 MUST negotiate TLS 1.2 or prior as specified in [RFC5246], even if ClientHello.legacy_version is 0x0304 or later. Servers MAY abort the handshake upon receiving a ClientHello with legacy_version 0x0304 or later.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "4.2.1 Supported Versions"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8446",
      "SupportedVersions",
      "setLegacyVersionTo0304WithoutSVExt"
    ]
  },
  "8701-iaW1cm19MU": {
    "description": "A client MAY select one or more GREASE cipher suite values and advertise them in the \"cipher_suites\" field. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseCiphersuites"
    ]
  },
  "8701-PErDdQZt7u": {
    "description": "A client MAY select one or more GREASE extension values and advertise them as extensions with varying length and contents. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseExtensions"
    ]
  },
  "8701-2XMSQq7p9T": {
    "description": "A client MAY select one or more GREASE named group values and advertise them in the \"supported_groups\" extension, if sent.  It MAY also send KeyShareEntry values for a subset of those selected in the \"key_share\" extension.  For each of these, the \"key_exchange\" field MAY be any value. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseNamedGroup"
    ]
  },
  "8701-ek86W17BUz": {
    "description": "A client MAY select one or more GREASE signature algorithm values and advertise them in the \"signature_algorithms\" or \"signature_algorithms_cert\" extensions, if sent. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseSignatureAlgorithms"
    ]
  },
  "8701-fe7Ev3bbiq": {
    "description": "A client MAY select one or more GREASE ALPN identifiers and advertise them in the \"application_layer_protocol_negotiation\" extension, if sent. [...]Servers MUST NOT negotiate any GREASE value when offered in a ClientHello. Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80
    },
    "rfc": {
      "number": 8701,
      "section": "3. Client-Initiated Extension Points"
    },
    "tags": [
      "server",
      "tls13",
      "rfc8701",
      "ClientInitiatedExtensionPoints",
      "advertiseGreaseALPNIdentifiers"
    ]
  },
  "XSM-FeqjZ8aw4M": {
    "description": "Send two Client Hello Messages at the beginning of the Handshake",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "secondClientHello"
    ]
  },
  "XSM-h4swiGTUoj": {
    "description": "Begin the Handshake with Application Data",
    "severityLevels": {
      "Security": 100,
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": null,
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "beginWithApplicationData"
    ]
  },
  "XSM-ttrqZTyAR7": {
    "description": "Begin the Handshake with a Finished Message",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 100,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "beginWithFinished"
    ]
  },
  "XSM-suejNj5yGF": {
    "description": "If an implementation detects a change_cipher_spec record received before the first ClientHello message or after the peer's Finished message, it MUST be treated as an unexpected record type (though stateless servers may not be able to distinguish these cases from allowed cases).",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyChangeCipherSpecAfterFinished"
    ]
  },
  "XSM-XKTmaWjbUn": {
    "description": "An implementation which receives any other change_cipher_spec value or which receives a protected change_cipher_spec record MUST abort the handshake with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": {
      "number": 8446,
      "section": "5. Record Protocol"
    },
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendEncryptedChangeCipherSpec"
    ]
  },
  "XSM-nRMHLnST86": {
    "description": "Send a legacy ECDH Client Key Exchange Message instead of just a Finished",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyFlowECDHClientKeyExchange"
    ]
  },
  "XSM-fiTPAjuY4v": {
    "description": "Send a legacy DH Client Key Exchange Message instead of just a Finished",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyFlowDHClientKeyExchange"
    ]
  },
  "XSM-jGhG25V2Jy": {
    "description": "Send a legacy RSA Client Key Exchange Message instead of just a Finished",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 40
    },
    "rfc": null,
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendLegacyFlowRSAClientKeyExchange"
    ]
  },
  "XSM-Q5G5Vrenab": {
    "description": "Because TLS 1.3 forbids renegotiation, if a server has negotiated TLS 1.3 and receives a ClientHello at any other time, it MUST terminate the connection with an \"unexpected_message\" alert.",
    "severityLevels": {
      "Handshake": 60,
      "Interoperability": 80,
      "Alert": 60
    },
    "rfc": {
      "number": 8446,
      "section": "4.1.2 Client Hello"
    },
    "tags": [
      "server",
      "tls13",
      "statemachine",
      "StateMachine",
      "sendClientHelloAfterFinishedHandshake"
    ]
  },
  "6347-GeZa64E0Nt": {
    "description": "For each received record, the receiver MUST verify that the record contains a sequence number that does not duplicate the sequence number of any other record received during the life of this session.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.1.2.6. Anti-Replay"
    },
    "tags": [
      "both",
      "dtls12",
      "rfc6347",
      "AntiReplay",
      "sequenceNumberNotDuplicated"
    ]
  },
  "6347-rMf9lpA6G3": {
    "description": "If the MAC validation fails, the receiver MUST   discard the received record as invalid.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.1.2.6. Anti-Replay"
    },
    "tags": [
      "both",
      "dtls12",
      "rfc6347",
      "AntiReplay",
      "invalidMAC"
    ]
  },
  "6347-76Jna7IPv8": {
    "description": "DTLS 1.2 and 1.0 clients MUST use the version solely to indicate packet formatting (which is the same in both DTLS 1.2 and 1.0) and not as part of version negotiation.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.2.1. Denial-of-Service Countermeasures"
    },
    "tags": [
      "server",
      "dtls12",
      "rfc6347",
      "DoS",
      "negotiateDtls12viaRecordHeader"
    ]
  },
  "6347-tT9LA2Ba7T": {
    "description": "When responding to a HelloVerifyRequest, the client MUST use the same   parameter values (version, random, session_id, cipher_suites,   compression_method) as it did in the original ClientHello.",
    "addToSecondRfcRef" : "4.2.1. Denial-of-Service Countermeasures -- The client MUST retransmit the ClientHello with the cookie added.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.2.1. Denial-of-Service Countermeasures"
    },
    "tags": [
      "client",
      "dtls12",
      "rfc6347",
      "DoS",
      "responseToHelloVerifyRequest"
    ]
  },
  "6347-z0AiXbV3Y6": {
    "description": "The server MUST use the same   version number in the HelloVerifyRequest that it would use when   sending a ServerHello.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.2.1. Denial-of-Service Countermeasures"
    },
    "tags": [
      "server",
      "dtls12",
      "rfc6347",
      "DoS",
      "sameVersionNumberServerHello"
    ]
  },
  "6347-5R0A5tlkOm": {
    "description": "In order to avoid sequence number duplication in case of multiple HelloVerifyRequests, the server MUST use the record sequence number in the ClientHello as the record sequence number in the HelloVerifyRequest.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.2.1. Denial-of-Service Countermeasures"
    },
    "tags": [
      "server",
      "dtls12",
      "rfc6347",
      "DoS",
      "clientSequenceNumberInHelloVerifyRequest"
    ]
  },
  "6347-56hL9Blfzp": {
    "description": "In order to avoid sequence number duplication in   case of multiple cookie exchanges, the server MUST use the record   sequence number in the ClientHello as the record sequence number in   its initial ServerHello.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.2.1. Denial-of-Service Countermeasures"
    },
    "tags": [
      "server",
      "dtls12",
      "rfc6347",
      "DoS",
      "sequenceNumberFromClientHelloInServerHello"
    ]
  },
  "6347-g65TNbT3uV": {
    "description": "The server then verifies the cookie and proceeds with the handshake only if it is valid.",
    "severityLevels": {
      "Handshake": 100,
      "Interoperability": 100
    },
    "rfc": {
      "number": 6347,
      "section": "4.2.1. Denial-of-Service Countermeasures"
    },
    "tags": [
      "server",
      "dtls12",
      "rfc6347",
      "DoS",
      "invalidClientHelloCookie"
    ]
  }
}
